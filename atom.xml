<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>李乐的博客</title>
  
  <subtitle>李乐的博客</subtitle>
  <link href="https://lybigdata.xyz/atom.xml" rel="self"/>
  
  <link href="https://lybigdata.xyz/"/>
  <updated>2024-11-02T13:24:15.114Z</updated>
  <id>https://lybigdata.xyz/</id>
  
  <author>
    <name>李乐</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringBoot核心框架之AOP详解</title>
    <link href="https://lybigdata.xyz/posts/1566526591.html"/>
    <id>https://lybigdata.xyz/posts/1566526591.html</id>
    <published>2024-11-02T05:20:15.000Z</published>
    <updated>2024-11-02T13:24:15.114Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SpringBoot核心框架之AOP详解"><a href="#SpringBoot核心框架之AOP详解" class="headerlink" title="SpringBoot核心框架之AOP详解"></a>SpringBoot核心框架之AOP详解</h2><h3 id="一、AOP基础"><a href="#一、AOP基础" class="headerlink" title="一、AOP基础"></a>一、AOP基础</h3><h4 id="1-1-AOP概述"><a href="#1-1-AOP概述" class="headerlink" title="1.1 AOP概述"></a>1.1 AOP概述</h4><ul><li>AOP：<strong>A</strong>spect <strong>O</strong>riented <strong>P</strong>rogramming（面向切面编程，面向方面编程），其实就是面向特定方法编程。<ul><li>场景：项目部分功能运行较慢，定位执行耗时较长的业务方法，此时就需要统计每一个业务的执行耗时。</li><li>思路：给每个方法在开始前写一个开始计时的逻辑，在方法结束后写一个计时结束的逻辑，然后相减得到运行时间。</li></ul></li></ul><p>思路是没问题的，但是有个问题，一个项目是有很多方法的，如果挨个增加逻辑代码，会相当繁琐，造成代码的臃肿，所以可以使用AOP编程，将计时提出成一个这样的模板：</p><blockquote><ol><li>获取方法运行开始时间</li><li>运行原始方法</li><li>获取方法运行结束时间，计算执行耗时</li></ol></blockquote><p>原始方法就是我们需要计算时间的方法，并且可以对原始方法进行增强，其实这个技术就是用到了我们在Java基础部分学习的<strong>动态代理技术</strong>。</p><p>实现：动态代理是面向切面编程最主流的实现。而SpringAOP是Spring框架的高级技术，旨在管理bean对象的过程中，主要是通过底层的动态代理机制，对特点的方法进行编程。</p><h4 id="1-2-AOP快速入门"><a href="#1-2-AOP快速入门" class="headerlink" title="1.2 AOP快速入门"></a>1.2 AOP快速入门</h4><p>统计各个业务层方法执行耗时</p><ol><li>导入依赖：在pom.xml中导入AOP的依赖。<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><span id="more"></span></li><li>编写AOP程序：针对于特定方法根据业务需要进行编程。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span> <span class="comment">// 日志</span></span><br><span class="line"><span class="meta">@Component</span> <span class="comment">// 将当前类交给spring管理</span></span><br><span class="line"><span class="meta">@Aspect</span> <span class="comment">// 声明这是一个AOP类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TimeAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Around(&quot;execution(* com.example.service.*.*(..))&quot;)</span></span><br><span class="line">   <span class="comment">// @Around：表示这是一个环绕通知。</span></span><br><span class="line">   <span class="comment">// &quot;execution(* com.example.service.*.*(..))&quot;：切入点表达式，它定义了哪些方法会被这个环绕通知所拦截。这个后面会详细讲解。</span></span><br><span class="line">   <span class="comment">// execution(* ...)：表示拦截执行的方法。</span></span><br><span class="line">   <span class="comment">// * com.example.service.*.*(..)：表示拦截 com.example.service 包下所有类的所有方法（* 表示任意字符的通配符）。</span></span><br><span class="line">   <span class="comment">// ..：表示方法可以有任意数量和类型的参数。</span></span><br><span class="line">   <span class="keyword">public</span> Object <span class="title function_">recordTime</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">       <span class="comment">// ProceedingJoinPoint是 Spring AOP 中的一个接口，在使用环绕通知时需要</span></span><br><span class="line">       <span class="comment">// 它继承自 JoinPoint 接口，并添加了 proceed() 方法。</span></span><br><span class="line">       <span class="comment">// 这个方法是 AOP 代理链执行的关键部分，它允许你在切面中执行自定义逻辑后继续执行原始方法。</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">// 1. 记录开始时间</span></span><br><span class="line">       <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 2. 调用原始方法</span></span><br><span class="line">       <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> joinPoint.proceed(); <span class="comment">// 执行被通知的方法。如果不调用 proceed()，被通知的方法将不会执行。</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">// 3. 记录结束时间，计算耗时</span></span><br><span class="line">       <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">       <span class="comment">// getSignature()：返回当前连接点的签名。</span></span><br><span class="line">       log.info(joinPoint.getSignature()+<span class="string">&quot;方法执行耗时：&#123;&#125;ms&quot;</span>,end - start);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>查看结果<img src="http://img.lile.mailjob.net//202410271132975.png" alt="image-20241027113205274" style="zoom: 67%;" /></li></ol><p>这样我们就完成了，一个AOP的小例子，但是AOP的功能远不能这些，他还有更多的实用的功能。比如：记录操作日志：可以记录谁什么时间操作了什么方法，传了什么参数，返回值是什么都可以很方便的实现。还有比如<strong>权限控制，事务管理</strong>等等。</p><p><strong>我们来总结一下AOP的优势</strong></p><ol><li>代码无侵入</li><li>减少重复代码</li><li>提高开发效率</li><li>维护方便</li></ol><h4 id="1-3-AOP核心概念"><a href="#1-3-AOP核心概念" class="headerlink" title="1.3. AOP核心概念"></a>1.3. AOP核心概念</h4><p>连接点：JoinPoint，可以被连接点控制的方法（暗含方法执行时的信息）。 在此例中就是需要被计算耗时的业务方法。<br>通知：Advice，指那些重复的逻辑，也就是共性功能（最终体现为一个方法）。在此例中就是计算耗时的逻辑代码。<br>切入点：PointCut，匹配连接点的条件，通知仅会在切入点方法执行时被应用。在此例中就是com.example.service 包下所有类的所有方法。<br>切面：Aspect，描述通知与切入点的对应关系（通知+切入点）。在此例中就是TimeAspect方法。<br>目标对象：Target，通知所应用的对象。在此例中就是通知com.example.service 包下所有类的所有方法。</p><h4 id="1-4-AOP的执行流程"><a href="#1-4-AOP的执行流程" class="headerlink" title="1.4. AOP的执行流程"></a>1.4. AOP的执行流程</h4><p>因为<code>SpringAOP</code>是基于动态代理实现的，所有在方法运行时就会先为目标对象基于动态代理生成一个代理对象，为什么说AOP可以增强方法，就是因为有一个代理方法，然后在AOP执行时，Spring就会将通知添加到代理对象的方法前面，也就是记录开始时间的那个逻辑代码，然后调用原始方法，也就是需要计时的那个方法，此时代理对象已经把原始方法添加到代理对象里面了，然后执行调用原始方法下面的代码，在此例中就是计算耗时的那部分，AOP会把这部分代码添加到代理对象的执行方法的下面，这样代理对象就完成了对目标方法的增强，也就是添加了计时功能，最后在程序运行时自动注入的也就不是原来的对象，而是代理对象了，不过这些都是AOP自动完成，我们只需要编写AOP代码即可。</p><h3 id="二、AOP进阶"><a href="#二、AOP进阶" class="headerlink" title="二、AOP进阶"></a>二、AOP进阶</h3><h4 id="2-1-AOP支持的通知类型"><a href="#2-1-AOP支持的通知类型" class="headerlink" title="2.1. AOP支持的通知类型"></a>2.1. AOP支持的通知类型</h4><p>通知类型：</p><ol><li><strong>环绕通知（Around Advice）</strong>   <code>重点</code>！！！：</li></ol><ul><li>使用 <code>@Around</code> 注解来定义。</li><li>包围目标方法的执行，可以在方法执行前后执行自定义逻辑，并且可以控制目标方法的执行。</li><li>通过 <code>ProceedingJoinPoint</code> 参数的 <code>proceed()</code> 方法来决定是否执行目标方法。</li></ul><ol start="2"><li><strong>前置通知（Before Advice）</strong>：</li></ol><ul><li>使用 <code>@Before</code> 注解来定义。</li><li>在目标方法执行之前执行，无论方法是否抛出异常，都会执行。</li><li>不能阻止目标方法的执行。</li></ul><ol start="3"><li><strong>后置通知（After Advice） 也叫最终通知</strong>：</li></ol><ul><li>使用 <code>@After</code> 注解来定义。</li><li>在目标方法执行之后执行，无论方法是否抛出异常，都会执行。</li><li>通常用于资源清理工作</li><li><strong>返回通知（After Returning Advice）</strong> <code>了解</code>：</li><li>使用 <code>@AfterReturning</code> 注解来定义。</li><li>在目标方法成功执行之后执行，即没有抛出异常时执行。</li><li>可以获取方法的返回值。</li></ul><ol start="4"><li><strong>异常通知（After Advice）</strong><code>了解</code>：</li></ol><ul><li>使用 <code>@AfterThrowing</code> 注解来定义。</li><li>在目标方法抛出异常后执行。</li><li>可以获取抛出的异常对象。</li></ul><p><strong>注意事项：</strong></p><ol><li>环绕通知需要自己调用<code>joinPoint.proceed()</code>来让原始方法执行，其他通知则不需要。</li><li>环绕通知的返回值必须是<code>Object</code>,来接受原始方法的返回值。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 因为示例中的切入点都是一样的，所以不用写多次切入表达式，创建一个方法即可。</span></span><br><span class="line">    <span class="comment">// 此方法也可在其他AOP需要切入点的地方使用。</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.example.service.impl.DeptServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pt</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 前置通知</span></span><br><span class="line">    <span class="meta">@Before(&quot;pt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Before</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;before ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 环绕通知</span></span><br><span class="line">    <span class="meta">@Around(&quot;pt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">Around</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        log.info(<span class="string">&quot;around after ...&quot;</span>);</span><br><span class="line">        <span class="comment">// 调用原始方法</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">proceed</span> <span class="operator">=</span> joinPoint.proceed();</span><br><span class="line">        log.info(<span class="string">&quot;around after ...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> proceed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 后置通知</span></span><br><span class="line">    <span class="meta">@After(&quot;pt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">After</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;after ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回通知</span></span><br><span class="line">    <span class="meta">@AfterReturning(&quot;pt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Returning</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;returning ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 异常通知</span></span><br><span class="line">    <span class="meta">@AfterThrowing(&quot;pt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Throwing</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;throwing ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-多个通知之间的执行顺序"><a href="#2-2-多个通知之间的执行顺序" class="headerlink" title="2.2. 多个通知之间的执行顺序"></a>2.2. 多个通知之间的执行顺序</h4><p>当有多个切面的切入点都匹配到了目标方法，目标方法运行时，多个通知方法都会执行。那么顺序是怎么的呢？<br>我们先创建三个AOP程序，分别给他们创建一个前置通知和后置通知，然后启动程序观察他们的输出情况。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MyAspect2</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;execution(* com.example.service.impl.DeptServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">befor</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;befor2 ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;execution(* com.example.service.impl.DeptServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;after2 ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// MyAspect3</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect3</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;execution(* com.example.service.impl.DeptServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">befor</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;befor3 ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;execution(* com.example.service.impl.DeptServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;after3 ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// MyAspect4</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect4</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;execution(* com.example.service.impl.DeptServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">befor</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;befor4 ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;execution(* com.example.service.impl.DeptServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;after4 ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line"> com.example.aop.MyAspect2                : befor2 ...</span><br><span class="line"> com.example.aop.MyAspect3                : befor3 ...</span><br><span class="line"> com.example.aop.MyAspect4                : befor4 ...</span><br><span class="line"></span><br><span class="line"> com.example.aop.MyAspect4                : after4 ...</span><br><span class="line"> com.example.aop.MyAspect3                : after3 ...</span><br><span class="line"> com.example.aop.MyAspect2                : after2 ...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 然后我们把MyAspect2改成MyAspect5，但输出内容不变，我们来看一下输出结果</span></span><br><span class="line"> com.example.aop.MyAspect3                : befor3 ...</span><br><span class="line"> com.example.aop.MyAspect4                : befor4 ...</span><br><span class="line"> com.example.aop.MyAspect5                : befor2 ...</span><br><span class="line"></span><br><span class="line"> com.example.aop.MyAspect5                : after2 ...</span><br><span class="line"> com.example.aop.MyAspect4                : after4 ...</span><br><span class="line"> com.example.aop.MyAspect3                : after3 ...</span><br></pre></td></tr></table></figure><h5 id="2-2-1-默认情况："><a href="#2-2-1-默认情况：" class="headerlink" title="2.2.1 默认情况："></a>2.2.1 默认情况：</h5><p>执行顺序是和类名有关系的，对于目标方法前的通知字母越靠前的越先执行，目标方法后的通知则相反，字母越靠前的越晚执行，这和Filter拦截器的规则是一样的。</p><h5 id="2-2-2-也可以使用注解的方式指定顺序。使用-Order-数字-加在切面类上来控制顺序。"><a href="#2-2-2-也可以使用注解的方式指定顺序。使用-Order-数字-加在切面类上来控制顺序。" class="headerlink" title="2.2.2 也可以使用注解的方式指定顺序。使用@Order(数字)加在切面类上来控制顺序。"></a>2.2.2 也可以使用<strong>注解</strong>的方式指定顺序。使用<code>@Order(数字)</code>加在切面类上来控制顺序。</h5><p>目标方法前的通知：数字小的先执行。<br>目标方法后的通知：数字小的后执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Order(10)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect3</span> &#123;</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-切入点表达式"><a href="#2-3-切入点表达式" class="headerlink" title="2.3. 切入点表达式"></a>2.3. 切入点表达式</h4><p>切入点表达式：描述切入点方法的一种表达式。<br>作用：主要决定项目中哪些方法需要加入通知。<br>常见形式：</p><ul><li>execution(…)：根据方法的签名来匹配。</li><li>@annotation：根据注解匹配。</li></ul><h5 id="2-3-1-execution-…"><a href="#2-3-1-execution-…" class="headerlink" title="2.3.1  execution(…)"></a>2.3.1  execution(…)</h5><p>execution主要是通过方法的返回值，类名，包名，方法名，方法参数等信息来匹配，语法为：<br>execution(访问修饰符？ 返回值   包名.类名.?方法名(方法参数) throws 异常)</p><p>其中带 <code>?</code> 的表示可以省略的部分</p><ul><li>访问修饰符：可省略（比如：public private …）</li><li>包名.类名：可省略    <strong>但不推荐</strong></li><li>throws 异常：可省略 （注意是方法上声明可抛出的异常，不是实际抛出的异常）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 完整的写法：</span></span><br><span class="line"><span class="meta">@Before(&quot;execution(public void com.example.service.impl.DeptServiceImpl.add(java.lang.Integer))&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">befor</span><span class="params">()</span>&#123;</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以使用通配符描述切入点</p><ul><li>单个独立的任意符号，可以通配任意返回值，包括包名，类名，方法名，任意一个参数，也可以通配包，类，方法名的一部分。</li></ul> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@After(&quot;execution(* com.*.service.*.add*(*))&quot;)</span><br></pre></td></tr></table></figure><ul><li>多个连续的任意符号，可以通配任意层级的包，或任意类型，任意个数的参数。</li></ul> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@After(&quot;execution(* com.example..DeptService.*(..))&quot;)</span><br></pre></td></tr></table></figure><ul><li>根据业务的需要，也可以使用 且（&amp;&amp;），或（||），非（！）来组合切入点表达式。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@After(&quot;execution(* com.example..DeptService.*(..)) || execution(* com.example.service.DeptService.*(..))&quot;)</span><br></pre></td></tr></table></figure><h5 id="2-3-2-annotation：用于匹配标识有特定注解的方法"><a href="#2-3-2-annotation：用于匹配标识有特定注解的方法" class="headerlink" title="2.3.2  @annotation：用于匹配标识有特定注解的方法"></a>2.3.2  @annotation：用于匹配标识有特定注解的方法</h5><p>语法：@annotation(注解的全类名)</p><p>先新建一个注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span>  <span class="comment">// 用来描述有效时间，RUNTIMW：在运行时有效</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span> <span class="comment">// 用来说明这个注解可以运行在哪里， METHOD：方法上</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyLog &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在目标方法上添加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MyLog</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">    deptMapper.delect(id); <span class="comment">// 根据id删除部门</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@MyLog</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Dept dept)</span> &#123;</span><br><span class="line">    dept.setCreateTime(LocalDateTime.now());</span><br><span class="line">    dept.setUpdateTime(LocalDateTime.now());</span><br><span class="line">    deptMapper.add(dept);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在切入点表达式以注解的方式进行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@After(&quot;@annotation(com.example.aop.MyLog)&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-连接点"><a href="#3-3-连接点" class="headerlink" title="3.3. 连接点"></a>3.3. 连接点</h4><p>在Spring中使用JoinPoint抽象了连接点，用它可以获取方法执行时的相关信息，如目标类目，方法名，方法参数等。</p><ul><li>对于环绕通知（@around），获取连接点信息只能使用<code>ProceedingJoinPoint</code></li><li>对于其他四种通知，获取连接点信息只能使用<code>JoinPoint</code>，他是ProceedingJoinPoint的父类型。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我们只在环绕通知中演示，因为API都是相同的</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect5</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;@annotation(com.example.aop.MyLog)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pt</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;pt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;before ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Around(&quot;pt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        log.info(<span class="string">&quot;around ... before&quot;</span>);</span><br><span class="line">        <span class="comment">// 1. 获取目标对象的类名</span></span><br><span class="line">        log.info(<span class="string">&quot;目标对象的类名:&quot;</span>+joinPoint.getTarget().getClass().getName());</span><br><span class="line">        <span class="comment">// 2. 获取目标方法的方法名</span></span><br><span class="line">        log.info(<span class="string">&quot;目标方法的方法名&quot;</span>+joinPoint.getSignature().getName());</span><br><span class="line">        <span class="comment">// 3. 目标方法运行时传入的参数</span></span><br><span class="line">        log.info(<span class="string">&quot;目标方法运行时传入的参数&quot;</span>+ Arrays.toString(joinPoint.getArgs())); <span class="comment">// 数组不能直接输出</span></span><br><span class="line">        <span class="comment">// 4. 放行，目标方法执行</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> joinPoint.proceed();</span><br><span class="line">        <span class="comment">// 5. 获取目标方法的返回值</span></span><br><span class="line">        log.info(<span class="string">&quot;目标方法的返回值&quot;</span>+ object);</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;around ... after&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 查看结果</span></span><br><span class="line">com.example.aop.MyAspect5                : around ... before</span><br><span class="line">com.example.aop.MyAspect5                : 目标对象的类名:com.example.service.impl.DeptServiceImpl</span><br><span class="line">com.example.aop.MyAspect5                : 目标方法的方法名select</span><br><span class="line">com.example.aop.MyAspect5                : 目标方法运行时传入的参数[<span class="number">1</span>]</span><br><span class="line">com.example.aop.MyAspect5                : before ...</span><br><span class="line">com.example.aop.MyAspect5                : 目标方法的返回值[Dept(id=<span class="number">1</span>, name=学工部, createTime=<span class="number">2023</span>-<span class="number">11</span>-30T13:<span class="number">55</span>:<span class="number">55</span>, updateTime=<span class="number">2023</span>-<span class="number">11</span>-30T13:<span class="number">55</span>:<span class="number">55</span>)]</span><br><span class="line">com.example.aop.MyAspect5                : around ... after</span><br></pre></td></tr></table></figure><h3 id="三、AOP案例"><a href="#三、AOP案例" class="headerlink" title="三、AOP案例"></a>三、AOP案例</h3><h4 id="3-1-分析"><a href="#3-1-分析" class="headerlink" title="3.1. 分析"></a>3.1. 分析</h4><p>需求：将项目中的增、删、改、相关接口的操作日志记录到数据库表中</p><ul><li>操作日志包含：操作人，操作时间，执行方法的全类名，执行方法名，方法运行时的参数，返回值，方法运行时长。<br>思路分析：</li><li>需要对方法添加统一的功能，使用AOP最方便，并且需要计算运行时长，所以使用 <strong>环绕通知</strong></li><li>因为增删改的方法名没有规则，所以使用<strong>注解</strong>的方式写切入表达式<br>步骤：<ul><li>准备：<ul><li>案例中引入AOP的起步依赖</li><li>设计数据表结构，并且引入对应的实体类</li></ul></li><li>编码：<ul><li>自定义注解：@Log</li><li>定义切面类，完成记录操作日志的逻辑代码</li></ul></li></ul></li></ul><h4 id="3-2-开始干活"><a href="#3-2-开始干活" class="headerlink" title="3.2. 开始干活"></a>3.2. 开始干活</h4><p>3.2.1. 创建数据库：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> operate_log</span><br><span class="line">(</span><br><span class="line">   id            <span class="type">int</span> unsigned <span class="keyword">primary</span> key auto_increment comment <span class="string">&#x27;ID&#x27;</span>,</span><br><span class="line">   operate_user  <span class="type">int</span> unsigned comment <span class="string">&#x27;操作人ID&#x27;</span>,</span><br><span class="line">   operate_time  datetime comment <span class="string">&#x27;操作时间&#x27;</span>,</span><br><span class="line">   class_name    <span class="type">varchar</span>(<span class="number">100</span>) comment <span class="string">&#x27;操作的类名&#x27;</span>,</span><br><span class="line">   method_name   <span class="type">varchar</span>(<span class="number">100</span>) comment <span class="string">&#x27;操作的方法名&#x27;</span>,</span><br><span class="line">   method_params <span class="type">varchar</span>(<span class="number">1000</span>) comment <span class="string">&#x27;方法参数&#x27;</span>,</span><br><span class="line">   return_value  <span class="type">varchar</span>(<span class="number">2000</span>) comment <span class="string">&#x27;返回值&#x27;</span>,</span><br><span class="line">   cost_time     <span class="type">bigint</span> comment <span class="string">&#x27;方法执行耗时, 单位:ms&#x27;</span></span><br><span class="line">) comment <span class="string">&#x27;操作日志表&#x27;</span>;</span><br></pre></td></tr></table></figure><p>3.2.2. 引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- AOP--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- fastJSON  阿里巴巴提供的转JSON的工具--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 因为返回值是一个json的，但数据库表需要的是字符串，所以使用此工具将json转换成String --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.2.3. 新建实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OperateLog</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id; <span class="comment">//ID</span></span><br><span class="line">    <span class="keyword">private</span> Integer operateUser; <span class="comment">//操作人ID</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime operateTime; <span class="comment">//操作时间</span></span><br><span class="line">    <span class="keyword">private</span> String className; <span class="comment">//操作类名</span></span><br><span class="line">    <span class="keyword">private</span> String methodName; <span class="comment">//操作方法名</span></span><br><span class="line">    <span class="keyword">private</span> String methodParams; <span class="comment">//操作方法参数</span></span><br><span class="line">    <span class="keyword">private</span> String returnValue; <span class="comment">//操作方法返回值</span></span><br><span class="line">    <span class="keyword">private</span> Long costTime; <span class="comment">//操作耗时</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.2.4.  新建Mapper层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OperateLogMapper</span> &#123;</span><br><span class="line">    <span class="comment">//插入日志数据</span></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into operate_log (operate_user, operate_time, class_name, method_name, method_params, return_value, cost_time) &quot; +</span></span><br><span class="line"><span class="meta">            &quot;values (#&#123;operateUser&#125;, #&#123;operateTime&#125;, #&#123;className&#125;, #&#123;methodName&#125;, #&#123;methodParams&#125;, #&#123;returnValue&#125;, #&#123;costTime&#125;);&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(OperateLog log)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.2.5.  新建注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Log &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.2.6.  定义切面类，完成记录操作日志的逻辑代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HttpServletRequest request;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OperateLogMapper operateLogMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;@annotation(com.example.anno.Log)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">recordLog</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="comment">//操作人ID    因为jwt令牌有登录人信息，所以解析jwt令牌就可以</span></span><br><span class="line"><span class="comment">//        String token = request.getHeader(&quot;token&quot;);</span></span><br><span class="line"><span class="comment">//        Claims claims = JwtUtils.parseJWT(token);</span></span><br><span class="line"><span class="comment">//        Integer user = (Integer) claims.get(&quot;id&quot;);</span></span><br><span class="line">        <span class="comment">//  使用链式编程   ↓↓↓</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">user</span> <span class="operator">=</span> (Integer) JwtUtils.parseJWT(request.getHeader(<span class="string">&quot;token&quot;</span>)).get(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        <span class="comment">//操作时间</span></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">optionTime</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">        <span class="comment">//操作类名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> joinPoint.getTarget().getClass().getName();</span><br><span class="line">        <span class="comment">//操作方法名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">        <span class="comment">//操作方法参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">args</span> <span class="operator">=</span> Arrays.toString(joinPoint.getArgs());</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis(); <span class="comment">// 记录方法开始运行时间</span></span><br><span class="line">        <span class="comment">// 调用原始方法</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> joinPoint.proceed();</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis(); <span class="comment">// 记录方法结束运行时间</span></span><br><span class="line">        <span class="comment">//操作方法返回值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">returnValue</span> <span class="operator">=</span> JSONObject.toJSONString(result);</span><br><span class="line">        <span class="comment">//操作耗时</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">costTime</span> <span class="operator">=</span> end - start;</span><br><span class="line">        <span class="comment">// 记录操作日志</span></span><br><span class="line">        <span class="type">OperateLog</span> <span class="variable">operateLog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OperateLog</span>(<span class="literal">null</span>, user, optionTime, className, methodName, args, returnValue, costTime);</span><br><span class="line">        operateLogMapper.insert(operateLog);</span><br><span class="line">        log.info(<span class="string">&quot;AOP记录操作日志：&#123;&#125;&quot;</span>, operateLog);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.2.7.  给需要记录的方法上面添加自定义的注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里就不一一展示了    </span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id删除部门</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Log</span></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;根据id删除部门：&#123;&#125;&quot;</span>,id);</span><br><span class="line">        deptService.delete(id);</span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加部门</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Log</span></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">add</span><span class="params">(<span class="meta">@RequestBody</span> Dept dept)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;添加部门&#123;&#125;&quot;</span>,dept);</span><br><span class="line">        deptService.add(dept);</span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-查看结果"><a href="#3-3-查看结果" class="headerlink" title="3.3. 查看结果"></a>3.3. 查看结果</h4><p>刚刚进行了部门的增删改以及员工的增删改操作，我们查看数据库，看有没有被记录。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1,1,2024-10-27 20:20:23,com.example.controller.DeptController,delete,[15],&quot;&#123;&quot;&quot;code&quot;&quot;:1,&quot;&quot;msg&quot;&quot;:&quot;&quot;success&quot;&quot;&#125;&quot;,40</span><br><span class="line">2,1,2024-10-27 20:20:45,com.example.controller.DeptController,add,&quot;[Dept(id=null, name=测试部, createTime=null, updateTime=null)]&quot;,&quot;&#123;&quot;&quot;code&quot;&quot;:1,&quot;&quot;msg&quot;&quot;:&quot;&quot;success&quot;&quot;&#125;&quot;,5</span><br><span class="line">3,1,2024-10-27 20:21:00,com.example.controller.EmpController,sava,&quot;[Emp(id=null, username=测试, password=null, name=测试, gender=1, image=, job=1, entrydate=2024-10-20, deptId=16, createTime=null, updateTime=null)]&quot;,&quot;&#123;&quot;&quot;code&quot;&quot;:1,&quot;&quot;msg&quot;&quot;:&quot;&quot;success&quot;&quot;&#125;&quot;,6</span><br><span class="line">4,1,2024-10-27 20:23:01,com.example.controller.DeptController,add,&quot;[Dept(id=null, name=1, createTime=null, updateTime=null)]&quot;,&quot;&#123;&quot;&quot;code&quot;&quot;:1,&quot;&quot;msg&quot;&quot;:&quot;&quot;success&quot;&quot;&#125;&quot;,8</span><br><span class="line">5,1,2024-10-27 20:23:18,com.example.controller.DeptController,delete,[17],&quot;&#123;&quot;&quot;code&quot;&quot;:1,&quot;&quot;msg&quot;&quot;:&quot;&quot;success&quot;&quot;&#125;&quot;,12</span><br></pre></td></tr></table></figure><p><img src="http://img.lile.mailjob.net//202410272027467.png" alt="image-20241027202743999"></p><p><strong>完全符合要求！！！！！！</strong>## SpringBoot核心框架之AOP详解</p><h3 id="一、AOP基础-1"><a href="#一、AOP基础-1" class="headerlink" title="一、AOP基础"></a>一、AOP基础</h3><h4 id="1-1-AOP概述-1"><a href="#1-1-AOP概述-1" class="headerlink" title="1.1 AOP概述"></a>1.1 AOP概述</h4><ul><li>AOP：<strong>A</strong>spect <strong>O</strong>riented <strong>P</strong>rogramming（面向切面编程，面向方面编程），其实就是面向特定方法编程。<ul><li>场景：项目部分功能运行较慢，定位执行耗时较长的业务方法，此时就需要统计每一个业务的执行耗时。</li><li>思路：给每个方法在开始前写一个开始计时的逻辑，在方法结束后写一个计时结束的逻辑，然后相减得到运行时间。</li></ul></li></ul><p>思路是没问题的，但是有个问题，一个项目是有很多方法的，如果挨个增加逻辑代码，会相当繁琐，造成代码的臃肿，所以可以使用AOP编程，将计时提出成一个这样的模板：</p><blockquote><ol><li>获取方法运行开始时间</li><li>运行原始方法</li><li>获取方法运行结束时间，计算执行耗时</li></ol></blockquote><p>原始方法就是我们需要计算时间的方法，并且可以对原始方法进行增强，其实这个技术就是用到了我们在Java基础部分学习的<strong>动态代理技术</strong>。</p><p>实现：动态代理是面向切面编程最主流的实现。而SpringAOP是Spring框架的高级技术，旨在管理bean对象的过程中，主要是通过底层的动态代理机制，对特点的方法进行编程。</p><h4 id="1-2-AOP快速入门-1"><a href="#1-2-AOP快速入门-1" class="headerlink" title="1.2 AOP快速入门"></a>1.2 AOP快速入门</h4><p>统计各个业务层方法执行耗时</p><ol><li><p>导入依赖：在pom.xml中导入AOP的依赖。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li><li><p>编写AOP程序：针对于特定方法根据业务需要进行编程。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span> <span class="comment">// 日志</span></span><br><span class="line"><span class="meta">@Component</span> <span class="comment">// 将当前类交给spring管理</span></span><br><span class="line"><span class="meta">@Aspect</span> <span class="comment">// 声明这是一个AOP类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TimeAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Around(&quot;execution(* com.example.service.*.*(..))&quot;)</span></span><br><span class="line">   <span class="comment">// @Around：表示这是一个环绕通知。</span></span><br><span class="line">   <span class="comment">// &quot;execution(* com.example.service.*.*(..))&quot;：切入点表达式，它定义了哪些方法会被这个环绕通知所拦截。这个后面会详细讲解。</span></span><br><span class="line">   <span class="comment">// execution(* ...)：表示拦截执行的方法。</span></span><br><span class="line">   <span class="comment">// * com.example.service.*.*(..)：表示拦截 com.example.service 包下所有类的所有方法（* 表示任意字符的通配符）。</span></span><br><span class="line">   <span class="comment">// ..：表示方法可以有任意数量和类型的参数。</span></span><br><span class="line">   <span class="keyword">public</span> Object <span class="title function_">recordTime</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">       <span class="comment">// ProceedingJoinPoint是 Spring AOP 中的一个接口，在使用环绕通知时需要</span></span><br><span class="line">       <span class="comment">// 它继承自 JoinPoint 接口，并添加了 proceed() 方法。</span></span><br><span class="line">       <span class="comment">// 这个方法是 AOP 代理链执行的关键部分，它允许你在切面中执行自定义逻辑后继续执行原始方法。</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">// 1. 记录开始时间</span></span><br><span class="line">       <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 2. 调用原始方法</span></span><br><span class="line">       <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> joinPoint.proceed(); <span class="comment">// 执行被通知的方法。如果不调用 proceed()，被通知的方法将不会执行。</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">// 3. 记录结束时间，计算耗时</span></span><br><span class="line">       <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">       <span class="comment">// getSignature()：返回当前连接点的签名。</span></span><br><span class="line">       log.info(joinPoint.getSignature()+<span class="string">&quot;方法执行耗时：&#123;&#125;ms&quot;</span>,end - start);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>查看结果<img src="http://img.lile.mailjob.net//202410271132975.png" alt="image-20241027113205274" style="zoom: 67%;" /></li></ol><p>这样我们就完成了，一个AOP的小例子，但是AOP的功能远不能这些，他还有更多的实用的功能。比如：记录操作日志：可以记录谁什么时间操作了什么方法，传了什么参数，返回值是什么都可以很方便的实现。还有比如<strong>权限控制，事务管理</strong>等等。</p><p><strong>我们来总结一下AOP的优势</strong></p><ol><li>代码无侵入</li><li>减少重复代码</li><li>提高开发效率</li><li>维护方便</li></ol><h4 id="1-3-AOP核心概念-1"><a href="#1-3-AOP核心概念-1" class="headerlink" title="1.3. AOP核心概念"></a>1.3. AOP核心概念</h4><p>连接点：JoinPoint，可以被连接点控制的方法（暗含方法执行时的信息）。 在此例中就是需要被计算耗时的业务方法。<br>通知：Advice，指那些重复的逻辑，也就是共性功能（最终体现为一个方法）。在此例中就是计算耗时的逻辑代码。<br>切入点：PointCut，匹配连接点的条件，通知仅会在切入点方法执行时被应用。在此例中就是com.example.service 包下所有类的所有方法。<br>切面：Aspect，描述通知与切入点的对应关系（通知+切入点）。在此例中就是TimeAspect方法。<br>目标对象：Target，通知所应用的对象。在此例中就是通知com.example.service 包下所有类的所有方法。</p><h4 id="1-4-AOP的执行流程-1"><a href="#1-4-AOP的执行流程-1" class="headerlink" title="1.4. AOP的执行流程"></a>1.4. AOP的执行流程</h4><p>因为<code>SpringAOP</code>是基于动态代理实现的，所有在方法运行时就会先为目标对象基于动态代理生成一个代理对象，为什么说AOP可以增强方法，就是因为有一个代理方法，然后在AOP执行时，Spring就会将通知添加到代理对象的方法前面，也就是记录开始时间的那个逻辑代码，然后调用原始方法，也就是需要计时的那个方法，此时代理对象已经把原始方法添加到代理对象里面了，然后执行调用原始方法下面的代码，在此例中就是计算耗时的那部分，AOP会把这部分代码添加到代理对象的执行方法的下面，这样代理对象就完成了对目标方法的增强，也就是添加了计时功能，最后在程序运行时自动注入的也就不是原来的对象，而是代理对象了，不过这些都是AOP自动完成，我们只需要编写AOP代码即可。</p><h3 id="二、AOP进阶-1"><a href="#二、AOP进阶-1" class="headerlink" title="二、AOP进阶"></a>二、AOP进阶</h3><h4 id="2-1-AOP支持的通知类型-1"><a href="#2-1-AOP支持的通知类型-1" class="headerlink" title="2.1. AOP支持的通知类型"></a>2.1. AOP支持的通知类型</h4><p>通知类型：</p><ol><li><strong>环绕通知（Around Advice）</strong>   <code>重点</code>！！！：</li></ol><ul><li>使用 <code>@Around</code> 注解来定义。</li><li>包围目标方法的执行，可以在方法执行前后执行自定义逻辑，并且可以控制目标方法的执行。</li><li>通过 <code>ProceedingJoinPoint</code> 参数的 <code>proceed()</code> 方法来决定是否执行目标方法。</li></ul><ol start="2"><li><strong>前置通知（Before Advice）</strong>：</li></ol><ul><li>使用 <code>@Before</code> 注解来定义。</li><li>在目标方法执行之前执行，无论方法是否抛出异常，都会执行。</li><li>不能阻止目标方法的执行。</li></ul><ol start="3"><li><strong>后置通知（After Advice） 也叫最终通知</strong>：</li></ol><ul><li>使用 <code>@After</code> 注解来定义。</li><li>在目标方法执行之后执行，无论方法是否抛出异常，都会执行。</li><li>通常用于资源清理工作</li><li><strong>返回通知（After Returning Advice）</strong> <code>了解</code>：</li><li>使用 <code>@AfterReturning</code> 注解来定义。</li><li>在目标方法成功执行之后执行，即没有抛出异常时执行。</li><li>可以获取方法的返回值。</li></ul><ol start="4"><li><strong>异常通知（After Advice）</strong><code>了解</code>：</li></ol><ul><li>使用 <code>@AfterThrowing</code> 注解来定义。</li><li>在目标方法抛出异常后执行。</li><li>可以获取抛出的异常对象。</li></ul><p><strong>注意事项：</strong></p><ol><li>环绕通知需要自己调用<code>joinPoint.proceed()</code>来让原始方法执行，其他通知则不需要。</li><li>环绕通知的返回值必须是<code>Object</code>,来接受原始方法的返回值。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 因为示例中的切入点都是一样的，所以不用写多次切入表达式，创建一个方法即可。</span></span><br><span class="line">    <span class="comment">// 此方法也可在其他AOP需要切入点的地方使用。</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.example.service.impl.DeptServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pt</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 前置通知</span></span><br><span class="line">    <span class="meta">@Before(&quot;pt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Before</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;before ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 环绕通知</span></span><br><span class="line">    <span class="meta">@Around(&quot;pt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">Around</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        log.info(<span class="string">&quot;around after ...&quot;</span>);</span><br><span class="line">        <span class="comment">// 调用原始方法</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">proceed</span> <span class="operator">=</span> joinPoint.proceed();</span><br><span class="line">        log.info(<span class="string">&quot;around after ...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> proceed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 后置通知</span></span><br><span class="line">    <span class="meta">@After(&quot;pt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">After</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;after ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回通知</span></span><br><span class="line">    <span class="meta">@AfterReturning(&quot;pt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Returning</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;returning ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 异常通知</span></span><br><span class="line">    <span class="meta">@AfterThrowing(&quot;pt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Throwing</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;throwing ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-多个通知之间的执行顺序-1"><a href="#2-2-多个通知之间的执行顺序-1" class="headerlink" title="2.2. 多个通知之间的执行顺序"></a>2.2. 多个通知之间的执行顺序</h4><p>当有多个切面的切入点都匹配到了目标方法，目标方法运行时，多个通知方法都会执行。那么顺序是怎么的呢？<br>我们先创建三个AOP程序，分别给他们创建一个前置通知和后置通知，然后启动程序观察他们的输出情况。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MyAspect2</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;execution(* com.example.service.impl.DeptServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">befor</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;befor2 ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;execution(* com.example.service.impl.DeptServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;after2 ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// MyAspect3</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect3</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;execution(* com.example.service.impl.DeptServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">befor</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;befor3 ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;execution(* com.example.service.impl.DeptServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;after3 ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// MyAspect4</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect4</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;execution(* com.example.service.impl.DeptServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">befor</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;befor4 ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;execution(* com.example.service.impl.DeptServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;after4 ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line"> com.example.aop.MyAspect2                : befor2 ...</span><br><span class="line"> com.example.aop.MyAspect3                : befor3 ...</span><br><span class="line"> com.example.aop.MyAspect4                : befor4 ...</span><br><span class="line"></span><br><span class="line"> com.example.aop.MyAspect4                : after4 ...</span><br><span class="line"> com.example.aop.MyAspect3                : after3 ...</span><br><span class="line"> com.example.aop.MyAspect2                : after2 ...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 然后我们把MyAspect2改成MyAspect5，但输出内容不变，我们来看一下输出结果</span></span><br><span class="line"> com.example.aop.MyAspect3                : befor3 ...</span><br><span class="line"> com.example.aop.MyAspect4                : befor4 ...</span><br><span class="line"> com.example.aop.MyAspect5                : befor2 ...</span><br><span class="line"></span><br><span class="line"> com.example.aop.MyAspect5                : after2 ...</span><br><span class="line"> com.example.aop.MyAspect4                : after4 ...</span><br><span class="line"> com.example.aop.MyAspect3                : after3 ...</span><br></pre></td></tr></table></figure><h5 id="2-2-1-默认情况：-1"><a href="#2-2-1-默认情况：-1" class="headerlink" title="2.2.1 默认情况："></a>2.2.1 默认情况：</h5><p>执行顺序是和类名有关系的，对于目标方法前的通知字母越靠前的越先执行，目标方法后的通知则相反，字母越靠前的越晚执行，这和Filter拦截器的规则是一样的。</p><h5 id="2-2-2-也可以使用注解的方式指定顺序。使用-Order-数字-加在切面类上来控制顺序。-1"><a href="#2-2-2-也可以使用注解的方式指定顺序。使用-Order-数字-加在切面类上来控制顺序。-1" class="headerlink" title="2.2.2 也可以使用注解的方式指定顺序。使用@Order(数字)加在切面类上来控制顺序。"></a>2.2.2 也可以使用<strong>注解</strong>的方式指定顺序。使用<code>@Order(数字)</code>加在切面类上来控制顺序。</h5><p>目标方法前的通知：数字小的先执行。<br>目标方法后的通知：数字小的后执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Order(10)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect3</span> &#123;</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-切入点表达式-1"><a href="#2-3-切入点表达式-1" class="headerlink" title="2.3. 切入点表达式"></a>2.3. 切入点表达式</h4><p>切入点表达式：描述切入点方法的一种表达式。<br>作用：主要决定项目中哪些方法需要加入通知。<br>常见形式：</p><ul><li>execution(…)：根据方法的签名来匹配。</li><li>@annotation：根据注解匹配。</li></ul><h5 id="2-3-1-execution-…-1"><a href="#2-3-1-execution-…-1" class="headerlink" title="2.3.1  execution(…)"></a>2.3.1  execution(…)</h5><p>execution主要是通过方法的返回值，类名，包名，方法名，方法参数等信息来匹配，语法为：<br>execution(访问修饰符？ 返回值   包名.类名.?方法名(方法参数) throws 异常)</p><p>其中带 <code>?</code> 的表示可以省略的部分</p><ul><li>访问修饰符：可省略（比如：public private …）</li><li>包名.类名：可省略    <strong>但不推荐</strong></li><li>throws 异常：可省略 （注意是方法上声明可抛出的异常，不是实际抛出的异常）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 完整的写法：</span></span><br><span class="line"><span class="meta">@Before(&quot;execution(public void com.example.service.impl.DeptServiceImpl.add(java.lang.Integer))&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">befor</span><span class="params">()</span>&#123;</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以使用通配符描述切入点</p><ul><li>单个独立的任意符号，可以通配任意返回值，包括包名，类名，方法名，任意一个参数，也可以通配包，类，方法名的一部分。</li></ul> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@After(&quot;execution(* com.*.service.*.add*(*))&quot;)</span><br></pre></td></tr></table></figure><ul><li>多个连续的任意符号，可以通配任意层级的包，或任意类型，任意个数的参数。</li></ul> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@After(&quot;execution(* com.example..DeptService.*(..))&quot;)</span><br></pre></td></tr></table></figure><ul><li>根据业务的需要，也可以使用 且（&amp;&amp;），或（||），非（！）来组合切入点表达式。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@After(&quot;execution(* com.example..DeptService.*(..)) || execution(* com.example.service.DeptService.*(..))&quot;)</span><br></pre></td></tr></table></figure><h5 id="2-3-2-annotation：用于匹配标识有特定注解的方法-1"><a href="#2-3-2-annotation：用于匹配标识有特定注解的方法-1" class="headerlink" title="2.3.2  @annotation：用于匹配标识有特定注解的方法"></a>2.3.2  @annotation：用于匹配标识有特定注解的方法</h5><p>语法：@annotation(注解的全类名)</p><p>先新建一个注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span>  <span class="comment">// 用来描述有效时间，RUNTIMW：在运行时有效</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span> <span class="comment">// 用来说明这个注解可以运行在哪里， METHOD：方法上</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyLog &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在目标方法上添加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MyLog</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">    deptMapper.delect(id); <span class="comment">// 根据id删除部门</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@MyLog</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Dept dept)</span> &#123;</span><br><span class="line">    dept.setCreateTime(LocalDateTime.now());</span><br><span class="line">    dept.setUpdateTime(LocalDateTime.now());</span><br><span class="line">    deptMapper.add(dept);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在切入点表达式以注解的方式进行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@After(&quot;@annotation(com.example.aop.MyLog)&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-连接点-1"><a href="#3-3-连接点-1" class="headerlink" title="3.3. 连接点"></a>3.3. 连接点</h4><p>在Spring中使用JoinPoint抽象了连接点，用它可以获取方法执行时的相关信息，如目标类目，方法名，方法参数等。</p><ul><li>对于环绕通知（@around），获取连接点信息只能使用<code>ProceedingJoinPoint</code></li><li>对于其他四种通知，获取连接点信息只能使用<code>JoinPoint</code>，他是ProceedingJoinPoint的父类型。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我们只在环绕通知中演示，因为API都是相同的</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect5</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;@annotation(com.example.aop.MyLog)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pt</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;pt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;before ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Around(&quot;pt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        log.info(<span class="string">&quot;around ... before&quot;</span>);</span><br><span class="line">        <span class="comment">// 1. 获取目标对象的类名</span></span><br><span class="line">        log.info(<span class="string">&quot;目标对象的类名:&quot;</span>+joinPoint.getTarget().getClass().getName());</span><br><span class="line">        <span class="comment">// 2. 获取目标方法的方法名</span></span><br><span class="line">        log.info(<span class="string">&quot;目标方法的方法名&quot;</span>+joinPoint.getSignature().getName());</span><br><span class="line">        <span class="comment">// 3. 目标方法运行时传入的参数</span></span><br><span class="line">        log.info(<span class="string">&quot;目标方法运行时传入的参数&quot;</span>+ Arrays.toString(joinPoint.getArgs())); <span class="comment">// 数组不能直接输出</span></span><br><span class="line">        <span class="comment">// 4. 放行，目标方法执行</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> joinPoint.proceed();</span><br><span class="line">        <span class="comment">// 5. 获取目标方法的返回值</span></span><br><span class="line">        log.info(<span class="string">&quot;目标方法的返回值&quot;</span>+ object);</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;around ... after&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 查看结果</span></span><br><span class="line">com.example.aop.MyAspect5                : around ... before</span><br><span class="line">com.example.aop.MyAspect5                : 目标对象的类名:com.example.service.impl.DeptServiceImpl</span><br><span class="line">com.example.aop.MyAspect5                : 目标方法的方法名select</span><br><span class="line">com.example.aop.MyAspect5                : 目标方法运行时传入的参数[<span class="number">1</span>]</span><br><span class="line">com.example.aop.MyAspect5                : before ...</span><br><span class="line">com.example.aop.MyAspect5                : 目标方法的返回值[Dept(id=<span class="number">1</span>, name=学工部, createTime=<span class="number">2023</span>-<span class="number">11</span>-30T13:<span class="number">55</span>:<span class="number">55</span>, updateTime=<span class="number">2023</span>-<span class="number">11</span>-30T13:<span class="number">55</span>:<span class="number">55</span>)]</span><br><span class="line">com.example.aop.MyAspect5                : around ... after</span><br></pre></td></tr></table></figure><h3 id="三、AOP案例-1"><a href="#三、AOP案例-1" class="headerlink" title="三、AOP案例"></a>三、AOP案例</h3><h4 id="3-1-分析-1"><a href="#3-1-分析-1" class="headerlink" title="3.1. 分析"></a>3.1. 分析</h4><p>需求：将项目中的增、删、改、相关接口的操作日志记录到数据库表中</p><ul><li>操作日志包含：操作人，操作时间，执行方法的全类名，执行方法名，方法运行时的参数，返回值，方法运行时长。<br>思路分析：</li><li>需要对方法添加统一的功能，使用AOP最方便，并且需要计算运行时长，所以使用 <strong>环绕通知</strong></li><li>因为增删改的方法名没有规则，所以使用<strong>注解</strong>的方式写切入表达式<br>步骤：<ul><li>准备：<ul><li>案例中引入AOP的起步依赖</li><li>设计数据表结构，并且引入对应的实体类</li></ul></li><li>编码：<ul><li>自定义注解：@Log</li><li>定义切面类，完成记录操作日志的逻辑代码</li></ul></li></ul></li></ul><h4 id="3-2-开始干活-1"><a href="#3-2-开始干活-1" class="headerlink" title="3.2. 开始干活"></a>3.2. 开始干活</h4><p>3.2.1. 创建数据库：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> operate_log</span><br><span class="line">(</span><br><span class="line">   id            <span class="type">int</span> unsigned <span class="keyword">primary</span> key auto_increment comment <span class="string">&#x27;ID&#x27;</span>,</span><br><span class="line">   operate_user  <span class="type">int</span> unsigned comment <span class="string">&#x27;操作人ID&#x27;</span>,</span><br><span class="line">   operate_time  datetime comment <span class="string">&#x27;操作时间&#x27;</span>,</span><br><span class="line">   class_name    <span class="type">varchar</span>(<span class="number">100</span>) comment <span class="string">&#x27;操作的类名&#x27;</span>,</span><br><span class="line">   method_name   <span class="type">varchar</span>(<span class="number">100</span>) comment <span class="string">&#x27;操作的方法名&#x27;</span>,</span><br><span class="line">   method_params <span class="type">varchar</span>(<span class="number">1000</span>) comment <span class="string">&#x27;方法参数&#x27;</span>,</span><br><span class="line">   return_value  <span class="type">varchar</span>(<span class="number">2000</span>) comment <span class="string">&#x27;返回值&#x27;</span>,</span><br><span class="line">   cost_time     <span class="type">bigint</span> comment <span class="string">&#x27;方法执行耗时, 单位:ms&#x27;</span></span><br><span class="line">) comment <span class="string">&#x27;操作日志表&#x27;</span>;</span><br></pre></td></tr></table></figure><p>3.2.2. 引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- AOP--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- fastJSON  阿里巴巴提供的转JSON的工具--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 因为返回值是一个json的，但数据库表需要的是字符串，所以使用此工具将json转换成String --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.2.3. 新建实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OperateLog</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id; <span class="comment">//ID</span></span><br><span class="line">    <span class="keyword">private</span> Integer operateUser; <span class="comment">//操作人ID</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime operateTime; <span class="comment">//操作时间</span></span><br><span class="line">    <span class="keyword">private</span> String className; <span class="comment">//操作类名</span></span><br><span class="line">    <span class="keyword">private</span> String methodName; <span class="comment">//操作方法名</span></span><br><span class="line">    <span class="keyword">private</span> String methodParams; <span class="comment">//操作方法参数</span></span><br><span class="line">    <span class="keyword">private</span> String returnValue; <span class="comment">//操作方法返回值</span></span><br><span class="line">    <span class="keyword">private</span> Long costTime; <span class="comment">//操作耗时</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.2.4.  新建Mapper层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OperateLogMapper</span> &#123;</span><br><span class="line">    <span class="comment">//插入日志数据</span></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into operate_log (operate_user, operate_time, class_name, method_name, method_params, return_value, cost_time) &quot; +</span></span><br><span class="line"><span class="meta">            &quot;values (#&#123;operateUser&#125;, #&#123;operateTime&#125;, #&#123;className&#125;, #&#123;methodName&#125;, #&#123;methodParams&#125;, #&#123;returnValue&#125;, #&#123;costTime&#125;);&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(OperateLog log)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.2.5.  新建注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Log &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.2.6.  定义切面类，完成记录操作日志的逻辑代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HttpServletRequest request;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OperateLogMapper operateLogMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;@annotation(com.example.anno.Log)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">recordLog</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="comment">//操作人ID    因为jwt令牌有登录人信息，所以解析jwt令牌就可以</span></span><br><span class="line"><span class="comment">//        String token = request.getHeader(&quot;token&quot;);</span></span><br><span class="line"><span class="comment">//        Claims claims = JwtUtils.parseJWT(token);</span></span><br><span class="line"><span class="comment">//        Integer user = (Integer) claims.get(&quot;id&quot;);</span></span><br><span class="line">        <span class="comment">//  使用链式编程   ↓↓↓</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">user</span> <span class="operator">=</span> (Integer) JwtUtils.parseJWT(request.getHeader(<span class="string">&quot;token&quot;</span>)).get(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        <span class="comment">//操作时间</span></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">optionTime</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">        <span class="comment">//操作类名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> joinPoint.getTarget().getClass().getName();</span><br><span class="line">        <span class="comment">//操作方法名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">        <span class="comment">//操作方法参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">args</span> <span class="operator">=</span> Arrays.toString(joinPoint.getArgs());</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis(); <span class="comment">// 记录方法开始运行时间</span></span><br><span class="line">        <span class="comment">// 调用原始方法</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> joinPoint.proceed();</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis(); <span class="comment">// 记录方法结束运行时间</span></span><br><span class="line">        <span class="comment">//操作方法返回值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">returnValue</span> <span class="operator">=</span> JSONObject.toJSONString(result);</span><br><span class="line">        <span class="comment">//操作耗时</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">costTime</span> <span class="operator">=</span> end - start;</span><br><span class="line">        <span class="comment">// 记录操作日志</span></span><br><span class="line">        <span class="type">OperateLog</span> <span class="variable">operateLog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OperateLog</span>(<span class="literal">null</span>, user, optionTime, className, methodName, args, returnValue, costTime);</span><br><span class="line">        operateLogMapper.insert(operateLog);</span><br><span class="line">        log.info(<span class="string">&quot;AOP记录操作日志：&#123;&#125;&quot;</span>, operateLog);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.2.7.  给需要记录的方法上面添加自定义的注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里就不一一展示了    </span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id删除部门</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Log</span></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;根据id删除部门：&#123;&#125;&quot;</span>,id);</span><br><span class="line">        deptService.delete(id);</span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加部门</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Log</span></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">add</span><span class="params">(<span class="meta">@RequestBody</span> Dept dept)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;添加部门&#123;&#125;&quot;</span>,dept);</span><br><span class="line">        deptService.add(dept);</span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-查看结果-1"><a href="#3-3-查看结果-1" class="headerlink" title="3.3. 查看结果"></a>3.3. 查看结果</h4><p>刚刚进行了部门的增删改以及员工的增删改操作，我们查看数据库，看有没有被记录。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1,1,2024-10-27 20:20:23,com.example.controller.DeptController,delete,[15],&quot;&#123;&quot;&quot;code&quot;&quot;:1,&quot;&quot;msg&quot;&quot;:&quot;&quot;success&quot;&quot;&#125;&quot;,40</span><br><span class="line">2,1,2024-10-27 20:20:45,com.example.controller.DeptController,add,&quot;[Dept(id=null, name=测试部, createTime=null, updateTime=null)]&quot;,&quot;&#123;&quot;&quot;code&quot;&quot;:1,&quot;&quot;msg&quot;&quot;:&quot;&quot;success&quot;&quot;&#125;&quot;,5</span><br><span class="line">3,1,2024-10-27 20:21:00,com.example.controller.EmpController,sava,&quot;[Emp(id=null, username=测试, password=null, name=测试, gender=1, image=, job=1, entrydate=2024-10-20, deptId=16, createTime=null, updateTime=null)]&quot;,&quot;&#123;&quot;&quot;code&quot;&quot;:1,&quot;&quot;msg&quot;&quot;:&quot;&quot;success&quot;&quot;&#125;&quot;,6</span><br><span class="line">4,1,2024-10-27 20:23:01,com.example.controller.DeptController,add,&quot;[Dept(id=null, name=1, createTime=null, updateTime=null)]&quot;,&quot;&#123;&quot;&quot;code&quot;&quot;:1,&quot;&quot;msg&quot;&quot;:&quot;&quot;success&quot;&quot;&#125;&quot;,8</span><br><span class="line">5,1,2024-10-27 20:23:18,com.example.controller.DeptController,delete,[17],&quot;&#123;&quot;&quot;code&quot;&quot;:1,&quot;&quot;msg&quot;&quot;:&quot;&quot;success&quot;&quot;&#125;&quot;,12</span><br></pre></td></tr></table></figure><p><img src="http://img.lile.mailjob.net//202410272027467.png" alt="image-20241027202743999"></p><p><strong>完全符合要求！！！！！！</strong></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;SpringBoot核心框架之AOP详解&quot;&gt;&lt;a href=&quot;#SpringBoot核心框架之AOP详解&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot核心框架之AOP详解&quot;&gt;&lt;/a&gt;SpringBoot核心框架之AOP详解&lt;/h2&gt;&lt;h3 id=&quot;一、AOP基础&quot;&gt;&lt;a href=&quot;#一、AOP基础&quot; class=&quot;headerlink&quot; title=&quot;一、AOP基础&quot;&gt;&lt;/a&gt;一、AOP基础&lt;/h3&gt;&lt;h4 id=&quot;1-1-AOP概述&quot;&gt;&lt;a href=&quot;#1-1-AOP概述&quot; class=&quot;headerlink&quot; title=&quot;1.1 AOP概述&quot;&gt;&lt;/a&gt;1.1 AOP概述&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;AOP：&lt;strong&gt;A&lt;/strong&gt;spect &lt;strong&gt;O&lt;/strong&gt;riented &lt;strong&gt;P&lt;/strong&gt;rogramming（面向切面编程，面向方面编程），其实就是面向特定方法编程。&lt;ul&gt;
&lt;li&gt;场景：项目部分功能运行较慢，定位执行耗时较长的业务方法，此时就需要统计每一个业务的执行耗时。&lt;/li&gt;
&lt;li&gt;思路：给每个方法在开始前写一个开始计时的逻辑，在方法结束后写一个计时结束的逻辑，然后相减得到运行时间。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;思路是没问题的，但是有个问题，一个项目是有很多方法的，如果挨个增加逻辑代码，会相当繁琐，造成代码的臃肿，所以可以使用AOP编程，将计时提出成一个这样的模板：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;获取方法运行开始时间&lt;/li&gt;
&lt;li&gt;运行原始方法&lt;/li&gt;
&lt;li&gt;获取方法运行结束时间，计算执行耗时&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;原始方法就是我们需要计算时间的方法，并且可以对原始方法进行增强，其实这个技术就是用到了我们在Java基础部分学习的&lt;strong&gt;动态代理技术&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;实现：动态代理是面向切面编程最主流的实现。而SpringAOP是Spring框架的高级技术，旨在管理bean对象的过程中，主要是通过底层的动态代理机制，对特点的方法进行编程。&lt;/p&gt;
&lt;h4 id=&quot;1-2-AOP快速入门&quot;&gt;&lt;a href=&quot;#1-2-AOP快速入门&quot; class=&quot;headerlink&quot; title=&quot;1.2 AOP快速入门&quot;&gt;&lt;/a&gt;1.2 AOP快速入门&lt;/h4&gt;&lt;p&gt;统计各个业务层方法执行耗时&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;导入依赖：在pom.xml中导入AOP的依赖。&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;artifactId&amp;gt;spring-boot-starter-aop&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="AOP" scheme="https://lybigdata.xyz/tags/AOP/"/>
    
  </entry>
  
  <entry>
    <title>使用Java MVC开发高效、可扩展的Web应用</title>
    <link href="https://lybigdata.xyz/posts/2826338363.html"/>
    <id>https://lybigdata.xyz/posts/2826338363.html</id>
    <published>2023-09-23T14:20:35.000Z</published>
    <updated>2024-11-02T13:24:15.114Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在当今的Web开发领域，高效和可扩展性是我们追求的目标。Java作为一种强大且广泛使用的编程语言，提供了丰富的工具和框架来支持Web应用的开发。其中，MVC模式是一种被广泛采用的架构模式，它能够有效地组织和管理代码，使得应用更易于理解、维护和扩展。</p></blockquote><p>什么是MVC模式？ MVC模式是一种软件设计模式，旨在将一个应用程序划分为三个核心组件：模型（Model）、视图（View）和控制器（Controller）。每个组件有着明确的职责和功能，彼此之间相互独立，耦合度低。<br>模型（Model）：模型负责处理应用程序的数据逻辑。它封装了数据的结构和操作方法，并提供对数据的访问接口。<br>视图（View）：视图负责展示数据给用户，并接受用户的输入。它通常是用户界面的一部分，负责呈现数据，并将用户的操作转发给控制器进行处理。<br>控制器（Controller）：控制器是模型和视图之间的协调者。它接收视图产生的用户输入，并根据输入更新模型的状态或执行相应的业务逻辑。控制器还负责将模型的变化反馈给视图，以便及时更新用户界面。<br>通过将应用程序分解为这三个组件，MVC模式强调了代码的可重用性、可测试性和松耦合性。这使得应用程序更易于维护和扩展。</p><span id="more"></span><p>在Java中实现MVC模式 在Java中，我们可以使用许多框架和库来实现MVC模式。下面是一个简单的示例，展示了如何在Java中构建一个基本的MVC架构。<br>定义模型（Model）：创建Java类来表示应用程序的数据模型，并实现相应的数据逻辑。<br>创建视图（View）：开发用户界面，可以是基于Web的前端页面或者是桌面应用程序中的图形界面。<br>实现控制器（Controller）：编写Java类来处理用户的输入，并根据需要更新模型的状态。控制器还负责将模型的数据传递给视图进行展示。<br>使用Java MVC模式可以提供以下优势：</p><p>分离关注点：MVC模式将应用程序的不同方面分离开来，使得代码更具可读性和可维护性。开发人员可以独立地修改和扩展模型、视图和控制器，而无需影响其他部分的代码。<br>可测试性：由于模型、视图和控制器之间的松耦合性，我们可以更轻松地编写单元测试和集成测试，确保应用程序的质量和稳定性。<br>可重用性：通过将核心业务逻辑封装在模型中，我们可以将其在多个应用程序或不同的项目中进行重用，提高开发效率和代码共享。<br><strong>结论：</strong><br>本文介绍了使用Java MVC模式开发高效、可扩展的Web应用程序的方法。通过合理地组织和管理代码，我们可以实现代码的可维护性、可测试性和可扩展性。MVC模式的优势在于它提供清晰的分层结构和松耦合的组件，使得应用程序更易于开发和维护。</p><p>希望本文能对您理解和应用Java MVC模式有所帮助。谢谢阅读！</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;在当今的Web开发领域，高效和可扩展性是我们追求的目标。Java作为一种强大且广泛使用的编程语言，提供了丰富的工具和框架来支持Web应用的开发。其中，MVC模式是一种被广泛采用的架构模式，它能够有效地组织和管理代码，使得应用更易于理解、维护和扩展。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;什么是MVC模式？ MVC模式是一种软件设计模式，旨在将一个应用程序划分为三个核心组件：模型（Model）、视图（View）和控制器（Controller）。每个组件有着明确的职责和功能，彼此之间相互独立，耦合度低。&lt;br&gt;模型（Model）：模型负责处理应用程序的数据逻辑。它封装了数据的结构和操作方法，并提供对数据的访问接口。&lt;br&gt;视图（View）：视图负责展示数据给用户，并接受用户的输入。它通常是用户界面的一部分，负责呈现数据，并将用户的操作转发给控制器进行处理。&lt;br&gt;控制器（Controller）：控制器是模型和视图之间的协调者。它接收视图产生的用户输入，并根据输入更新模型的状态或执行相应的业务逻辑。控制器还负责将模型的变化反馈给视图，以便及时更新用户界面。&lt;br&gt;通过将应用程序分解为这三个组件，MVC模式强调了代码的可重用性、可测试性和松耦合性。这使得应用程序更易于维护和扩展。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://lybigdata.xyz/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>简化代码结构与提高灵活性：学习Java设计模式中的装饰器模式</title>
    <link href="https://lybigdata.xyz/posts/2751550177.html"/>
    <id>https://lybigdata.xyz/posts/2751550177.html</id>
    <published>2023-09-23T13:57:06.000Z</published>
    <updated>2024-11-02T13:24:15.114Z</updated>
    
    <content type="html"><![CDATA[<p>简化代码结构与提高灵活性：学习Java设计模式中的装饰器模式</p><p>在软件开发中，我们经常会遇到需要在不修改现有代码的情况下，对已有对象进行功能扩展或修改的需求。此时，装饰器模式就是一种非常有用的设计模式，它通过动态地将责任附加到对象上，来扩展对象的功能。本文将介绍装饰器模式的概念、应用场景以及如何使用Java设计模式中的装饰器模式来简化代码结构与提高灵活性。</p><p><strong>概念介绍：</strong><br>装饰器模式是一种结构型设计模式，它允许你通过将对象放入包含行为的特殊包装器中来为原始对象添加新的行为。这种模式可以在不改变原始对象的结构的情况下，动态地为对象添加功能。</p><span id="more"></span><p>在装饰器模式中，有<strong>四个</strong>核心角色：</p><p><strong>抽象组件（Component）：</strong>定义了被装饰者的接口，可以是一个抽象类或接口。<br><strong>具体组件（Concrete Component）：</strong>实现了抽象组件的接口，是被装饰者的具体实现。<br><strong>抽象装饰器（Decorator）：</strong>继承或实现了抽象组件的接口，同时持有一个抽象组件的引用。<br><strong>具体装饰器（Concrete Decorator）：</strong>继承或实现了抽象装饰器，实现了对抽象组件的装饰。<br><strong>应用场景</strong><br>装饰器模式常用于以下场景：</p><p>在不改变已有代码的情况下，动态地扩展一个对象的功能。<br>当需要为一个对象的功能添加多个不同的扩展时，使用继承会导致类的爆炸式增长，而装饰器模式可以灵活地组合这些扩展。<br>需要为一个对象的功能添加和撤销多个装饰时，装饰器模式可以方便地进行动态添加和移除。<br><strong>示例代码</strong><br>假设我们有一个简单的咖啡店系统，其中有一个基础的咖啡组件和多个装饰器组件，分别代表不同的咖啡调料。我们可以使用装饰器模式来动态地为咖啡添加调料。</p><p>首先，我们定义一个抽象组件Coffee，它表示咖啡的接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Coffee</span> &#123;</span><br><span class="line">    String <span class="title function_">getDescription</span><span class="params">()</span>;</span><br><span class="line">    <span class="type">double</span> <span class="title function_">getCost</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，我们实现一个具体组件SimpleCoffee，它表示基础的咖啡：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleCoffee</span> <span class="keyword">implements</span> <span class="title class_">Coffee</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDescription</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Simple Coffee&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getCost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，我们定义一个抽象装饰器CoffeeDecorator，它继承了Coffee接口，并持有一个Coffee对象的引用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">CoffeeDecorator</span> <span class="keyword">implements</span> <span class="title class_">Coffee</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> Coffee coffee;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CoffeeDecorator</span><span class="params">(Coffee coffee)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.coffee = coffee;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDescription</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> coffee.getDescription();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getCost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> coffee.getCost();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，我们实现具体装饰器MilkDecorator和SugarDecorator，它们分别代表添加牛奶和糖的咖啡调料：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MilkDecorator</span> <span class="keyword">extends</span> <span class="title class_">CoffeeDecorator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MilkDecorator</span><span class="params">(Coffee coffee)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(coffee);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDescription</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> coffee.getDescription() + <span class="string">&quot;, Milk&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getCost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> coffee.getCost() + <span class="number">0.5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SugarDecorator</span> <span class="keyword">extends</span> <span class="title class_">CoffeeDecorator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SugarDecorator</span><span class="params">(Coffee coffee)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(coffee);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDescription</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> coffee.getDescription() + <span class="string">&quot;, Sugar&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getCost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> coffee.getCost() + <span class="number">0.3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，我们可以使用装饰器模式来创建一个具有不同调料的咖啡对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Coffee</span> <span class="variable">coffee</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleCoffee</span>();</span><br><span class="line">        coffee = <span class="keyword">new</span> <span class="title class_">MilkDecorator</span>(coffee);</span><br><span class="line">        coffee = <span class="keyword">new</span> <span class="title class_">SugarDecorator</span>(coffee);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;Description: &quot;</span> + coffee.getDescription());</span><br><span class="line">        System.out.println(<span class="string">&quot;Cost: &quot;</span> + coffee.getCost());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出结果：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Description: Simple Coffee, Milk, Sugar</span><br><span class="line">Cost: <span class="number">1.8</span></span><br></pre></td></tr></table></figure><p>通过装饰器模式，我们可以动态地为咖啡对象添加不同的调料，而不需要修改现有的代码。这样，我们可以灵活地组合不同的调料，实现更多种类的咖啡。</p><p><strong>总结</strong><br>装饰器模式是一种非常有用的设计模式，它可以在不改变现有代码的情况下，动态地为对象添加功能。通过将责任附加到对象上的方式，装饰器模式可以实现代码的灵活复用和扩展。在实际开发中，我们可以使用装饰器模式来简化代码结构，提高代码的灵活性和可维护性。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;简化代码结构与提高灵活性：学习Java设计模式中的装饰器模式&lt;/p&gt;
&lt;p&gt;在软件开发中，我们经常会遇到需要在不修改现有代码的情况下，对已有对象进行功能扩展或修改的需求。此时，装饰器模式就是一种非常有用的设计模式，它通过动态地将责任附加到对象上，来扩展对象的功能。本文将介绍装饰器模式的概念、应用场景以及如何使用Java设计模式中的装饰器模式来简化代码结构与提高灵活性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;概念介绍：&lt;/strong&gt;&lt;br&gt;装饰器模式是一种结构型设计模式，它允许你通过将对象放入包含行为的特殊包装器中来为原始对象添加新的行为。这种模式可以在不改变原始对象的结构的情况下，动态地为对象添加功能。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://lybigdata.xyz/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>MySQL数据库管理的基本原则和技巧</title>
    <link href="https://lybigdata.xyz/posts/812346519.html"/>
    <id>https://lybigdata.xyz/posts/812346519.html</id>
    <published>2023-09-23T04:06:28.000Z</published>
    <updated>2024-11-02T13:24:15.114Z</updated>
    
    <content type="html"><![CDATA[<p>MySQL数据库是一种常用的关系型数据库管理系统，用于存储和管理大量的数据。在进行MySQL数据库管理时，有一些基本原则和技巧可以帮助我们更有效地管理数据库。</p><p><strong>数据库设计原则：</strong></p><p><strong>合理规划数据表结构：</strong> 根据数据之间的关系和业务需求，设计合理的数据表结构，避免冗余和重复的数据。<br><strong>使用适当的数据类型：</strong> 根据数据的特点和存储需求，选择合适的数据类型，减少存储空间的浪费。<br><strong>设计有效的索引：</strong> 根据查询需求和数据表的大小，设计适当的索引，提高查询效率。</p><span id="more"></span><p><strong>数据库优化技巧：</strong><br><strong>使用批量操作：</strong> 在插入、更新或删除大量数据时，使用批量操作可以减少与数据库的交互次数，提高性能。<br><strong>合理使用缓存：</strong> 利用MySQL的缓存机制，将经常访问的数据缓存在内存中，减少对磁盘的访问，提高查询速度。<br><strong>分区管理数据：</strong> 对于大型数据库，可以将数据按照某种规则进行分区存储，提高查询效率和管理灵活性。<br><strong>定期优化数据库：</strong>定期进行数据库的优化操作，如表优化、索引优化和统计信息更新，提高数据库的性能和稳定性。<br><strong>数据库备份和恢复：</strong></p><p><strong>定期备份数据库：</strong> 定期备份数据库是非常重要的，可以保护数据免受意外删除、硬件故障或人为错误的影响。<br><strong>使用适当的备份策略：</strong> 根据数据的重要性和变化频率，选择合适的备份策略，如完全备份、增量备份或差异备份。<br><strong>测试备份和恢复过程：</strong> 在实际发生数据丢失或损坏之前，定期测试备份和恢复过程，确保备份数据的完整性和可用性。<br>下面是一些MySQL数据库管理的示例代码：</p><p>创建数据表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE users (</span><br><span class="line">  id INT AUTO_INCREMENT PRIMARY KEY,</span><br><span class="line">  name VARCHAR(50),</span><br><span class="line">  email VARCHAR(50)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>插入数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO users (name, email) VALUES (&#x27;John&#x27;, &#x27;john@example.com&#x27;);</span><br><span class="line">INSERT INTO users (name, email) VALUES (&#x27;Jane&#x27;, &#x27;jane@example.com&#x27;);</span><br></pre></td></tr></table></figure><p>查询数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM users;</span><br><span class="line">SELECT * FROM users WHERE name = &#x27;John&#x27;;</span><br></pre></td></tr></table></figure><p>更新数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE users SET email = &#x27;john@example.org&#x27; WHERE id = 1;</span><br></pre></td></tr></table></figure><p>删除数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM users WHERE id = 2;</span><br></pre></td></tr></table></figure><p>以上是MySQL数据库管理的基本原则和技巧，通过合理的数据库设计、优化和备份策略，我们可以更好地管理和保护数据库中的数据。同时，掌握MySQL的基本操作和语法，可以更高效地进行数据库管理和查询操作。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;MySQL数据库是一种常用的关系型数据库管理系统，用于存储和管理大量的数据。在进行MySQL数据库管理时，有一些基本原则和技巧可以帮助我们更有效地管理数据库。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数据库设计原则：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;合理规划数据表结构：&lt;/strong&gt; 根据数据之间的关系和业务需求，设计合理的数据表结构，避免冗余和重复的数据。&lt;br&gt;&lt;strong&gt;使用适当的数据类型：&lt;/strong&gt; 根据数据的特点和存储需求，选择合适的数据类型，减少存储空间的浪费。&lt;br&gt;&lt;strong&gt;设计有效的索引：&lt;/strong&gt; 根据查询需求和数据表的大小，设计适当的索引，提高查询效率。&lt;/p&gt;</summary>
    
    
    
    <category term="MySQL数据库管理的基本原则和技巧" scheme="https://lybigdata.xyz/categories/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8E%9F%E5%88%99%E5%92%8C%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="Mysql" scheme="https://lybigdata.xyz/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>Java设计模式解析：迭代器模式的实现与应用</title>
    <link href="https://lybigdata.xyz/posts/166597485.html"/>
    <id>https://lybigdata.xyz/posts/166597485.html</id>
    <published>2023-08-13T02:16:20.000Z</published>
    <updated>2024-11-02T13:24:15.114Z</updated>
    
    <content type="html"><![CDATA[<p>迭代器模式是一种行为型设计模式，它提供了一种统一的方式来遍历集合中的元素，而无需暴露集合的内部结构。在本文中，我们将深入探讨迭代器模式的实现和应用。</p><p>在软件开发中，集合是一种常见的数据结构，用于存储和管理一组对象。通常，我们需要遍历集合中的元素以执行特定的操作。然而，集合的内部结构可能会发生变化，例如，我们可能会改变集合的实现方式或者添加新的集合类型。如果我们直接在代码中使用集合的特定方法来遍历元素，那么当集合发生变化时，我们需要修改所有使用该集合的代码。这将导致代码的不稳定性和维护困难。</p><p>迭代器模式的核心思想是将集合的遍历与集合的实现分离，以提供一种统一的遍历方式。迭代器模式定义了一个迭代器接口，该接口包含了遍历集合的方法。集合类实现迭代器接口，提供了获取迭代器的方法，并将遍历集合的操作委托给迭代器。这样，无论集合的内部结构如何变化，都不会影响到遍历集合的代码。</p><p>让我们通过一个示例来理解迭代器模式的具体实现。</p><p>首先，我们定义一个迭代器接口，包含了以下方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Iterator</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span>;</span><br><span class="line">    T <span class="title function_">next</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，我们创建一个集合类，实现迭代器接口，并提供获取迭代器的方法：</p><span id="more"></span><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyCollection</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Iterator</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> T[] elements;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> position;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyCollection</span><span class="params">(T[] elements)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.elements = elements;</span><br><span class="line">        <span class="built_in">this</span>.position = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> position &lt; elements.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (hasNext()) &#123;</span><br><span class="line">            <span class="keyword">return</span> elements[position++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Iterator&lt;T&gt; <span class="title function_">getIterator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，我们可以使用迭代器来遍历集合中的元素：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        String[] names = &#123;<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Charlie&quot;</span>&#125;;</span><br><span class="line">        MyCollection&lt;String&gt; collection = <span class="keyword">new</span> <span class="title class_">MyCollection</span>&lt;&gt;(names);</span><br><span class="line">        Iterator&lt;String&gt; iterator = collection.getIterator();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的示例中，我们创建了一个包含三个字符串的集合，并使用迭代器来遍历集合中的元素。通过调用hasNext()方法来判断是否还有下一个元素，通过调用next()方法来获取下一个元素。</p><p>迭代器模式的优点是将集合的遍历与集合的实现解耦，使得代码更加灵活和可扩展。当集合的内部结构发生变化时，我们只需要修改集合类的实现，而不需要修改遍历集合的代码。</p><p>总结起来，迭代器模式提供了一种统一的遍历集合的方式，使得代码更加灵活和可扩展。通过将遍历操作封装在迭代器中，我们可以轻松地在不同的集合类型之间切换，而无需修改遍历代码。这使得迭代器模式成为一种非常有用的设计模式，在实际开发中被广泛应用。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;迭代器模式是一种行为型设计模式，它提供了一种统一的方式来遍历集合中的元素，而无需暴露集合的内部结构。在本文中，我们将深入探讨迭代器模式的实现和应用。&lt;/p&gt;
&lt;p&gt;在软件开发中，集合是一种常见的数据结构，用于存储和管理一组对象。通常，我们需要遍历集合中的元素以执行特定的操作。然而，集合的内部结构可能会发生变化，例如，我们可能会改变集合的实现方式或者添加新的集合类型。如果我们直接在代码中使用集合的特定方法来遍历元素，那么当集合发生变化时，我们需要修改所有使用该集合的代码。这将导致代码的不稳定性和维护困难。&lt;/p&gt;
&lt;p&gt;迭代器模式的核心思想是将集合的遍历与集合的实现分离，以提供一种统一的遍历方式。迭代器模式定义了一个迭代器接口，该接口包含了遍历集合的方法。集合类实现迭代器接口，提供了获取迭代器的方法，并将遍历集合的操作委托给迭代器。这样，无论集合的内部结构如何变化，都不会影响到遍历集合的代码。&lt;/p&gt;
&lt;p&gt;让我们通过一个示例来理解迭代器模式的具体实现。&lt;/p&gt;
&lt;p&gt;首先，我们定义一个迭代器接口，包含了以下方法：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Iterator&lt;/span&gt;&amp;lt;T&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;hasNext&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    T &lt;span class=&quot;title function_&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后，我们创建一个集合类，实现迭代器接口，并提供获取迭代器的方法：&lt;/p&gt;</summary>
    
    
    
    <category term="Java设计模式解析" scheme="https://lybigdata.xyz/categories/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%A7%A3%E6%9E%90/"/>
    
    
    <category term="mysql" scheme="https://lybigdata.xyz/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>redis内存淘汰策略</title>
    <link href="https://lybigdata.xyz/posts/2661519066.html"/>
    <id>https://lybigdata.xyz/posts/2661519066.html</id>
    <published>2021-01-24T03:17:50.000Z</published>
    <updated>2024-11-02T13:24:15.114Z</updated>
    
    <content type="html"><![CDATA[<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><blockquote><p>redis LRU策略分析：<a href="https://www.cnblogs.com/linxiyue/p/10945216.html">https://www.cnblogs.com/linxiyue/p/10945216.html</a></p><p>redis LFU策略分析：<a href="https://www.cnblogs.com/linxiyue/p/10955533.html">https://www.cnblogs.com/linxiyue/p/10955533.html</a></p><p>redis LRU伪代码演示：<a href="https://github.com/mailjobblog/dev_redis/blob/master/LRU/LRU_Cache.php">https://github.com/mailjobblog/dev_redis/blob/master/LRU/LRU_Cache.php</a></p></blockquote><span id="more"></span><h2 id="内存淘汰策略"><a href="#内存淘汰策略" class="headerlink" title="内存淘汰策略"></a>内存淘汰策略</h2><ol><li>noeviction：当内存使用超过配置的时候会返回错误，不会驱逐任何键</li><li><code>allkeys-lru</code>：加入键的时候，如果过限，首先通过<code>LRU算法驱逐最久没有使用的键</code></li><li><code>volatile-lru</code>：加入键的时候如果过限，首先从设置了过期时间的键集合中<code>驱逐最久没有使用的键</code></li><li>allkeys-random：加入键的时候如果过限，从所有key随机删除</li><li>volatile-random：加入键的时候如果过限，从过期键的集合中随机驱逐</li><li>volatile-ttl：从配置了过期时间的键中驱逐马上就要过期的键</li><li><code>volatile-lfu</code>：从所有配置了过期时间的键中<code>驱逐使用频率最少的键</code></li><li><code>allkeys-lfu</code>：从<code>所有键中驱逐使用频率最少的键</code></li></ol><h2 id="LRU和LFU的区别"><a href="#LRU和LFU的区别" class="headerlink" title="LRU和LFU的区别"></a>LRU和LFU的区别</h2><p>LRU是最近最少使用页面置换算法(Least Recently Used),也就是首先<strong>淘汰最长时间未被使用的页面!</strong></p><p>LFU是最近最不常用页面置换算法(Least Frequently Used),也就是淘汰<strong>一定时期内被访问次数最少的页!</strong></p><h2 id="LRU"><a href="#LRU" class="headerlink" title="LRU"></a>LRU</h2><p>举例如下的访问模式，A每5s访问一次，B每2s访问一次，C与D每10s访问一次，<code>|</code>代表计算空闲时间的截止点：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">~~~~~A~~~~~A~~~~~A~~~~A~~~~~A~~~~~A~~|</span><br><span class="line">~~B~~B~~B~~B~~B~~B~~B~~B~~B~~B~~B~~B~|</span><br><span class="line">~~~~~~~~~~C~~~~~~~~~C~~~~~~~~~C~~~~~~|</span><br><span class="line">~~~~~D~~~~~~~~~~D~~~~~~~~~D~~~~~~~~~D|</span><br></pre></td></tr></table></figure><p><strong>在很长时期内</strong>、可以看到，<code>LRU</code>对于A、B、C工作的很好，完美预测了将来被访问到的概率B&gt;A&gt;C，但对于D却预测了最少的空闲时间。</p><p>但是，总体来说，<code>LRU</code>算法已经是一个性能足够好的算法了</p><p><img src="http://img.github.mailjob.net/oss.github/20210303213326.jpg"></p><h4 id="图解说明"><a href="#图解说明" class="headerlink" title="图解说明"></a>图解说明</h4><ul><li>新数据插入到链表头部</li><li>每当缓存命中（即缓存数据被访问），则将数据移到链表头部</li><li>当链表满的时候，将链表尾部的数据丢弃</li></ul><h4 id="LRU-Cache具备的操作："><a href="#LRU-Cache具备的操作：" class="headerlink" title="LRU Cache具备的操作："></a>LRU Cache具备的操作：</h4><ul><li>set(key,value)：如果key在hashmap中存在，则先重置对应的value值，然后获取对应的节点cur，将cur节点从链表删除，并移动到链表的头部；若果key在hashmap不存在，则新建一个节点，并将节点放到链表的头部。当Cache存满的时候，将链表最后一个节点删除即可。</li><li>get(key)：如果key在hashmap中存在，则把对应的节点放到链表头部，并返回对应的value值；如果不存在，则返回-1。</li></ul><h4 id="LRU配置参数"><a href="#LRU配置参数" class="headerlink" title="LRU配置参数"></a>LRU配置参数</h4><p><code>Redis</code>配置中和<code>LRU</code>有关的有三个：</p><ul><li><code>maxmemory</code>: 配置<code>Redis</code>存储数据时指定限制的内存大小，比如<code>100m</code>。当缓存消耗的内存超过这个数值时, 将触发数据淘汰。该数据配置为0时，表示缓存的数据量没有限制, 即LRU功能不生效。64位的系统默认值为0，32位的系统默认内存限制为3GB</li><li><code>maxmemory_policy</code>: 触发数据淘汰后的淘汰策略</li><li><code>maxmemory_samples</code>: 随机采样的精度，也就是随即取出key的数目。该数值配置越大, 越接近于真实的LRU算法，但是数值越大，相应消耗也变高，对性能有一定影响，样本值默认为5。</li></ul><h2 id="LFU"><a href="#LFU" class="headerlink" title="LFU"></a>LFU</h2><p><strong>示例图展示</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">~~~~~A~~~~~A~~~~~A~~~~A~~~~~A~~~~~A~~|</span><br><span class="line">~~B~~B~~B~~B~~B~~B~~B~~B~~B~~B~~B~~B~|</span><br><span class="line">~~~~~~~~~~C~~~~~~~~~C~~~~~~~~~C~~~~~~|</span><br><span class="line">~~~~~D~~~~~~~~~~D~~~~~~~~~D~~~~~~~~~D|</span><br></pre></td></tr></table></figure><p>在上面的情况中，<strong>在一定时期内</strong>，根据访问频繁情况，可以确定保留优先级：B&gt;A&gt;C&#x3D;D。</p><h4 id="LFU配置"><a href="#LFU配置" class="headerlink" title="LFU配置"></a>LFU配置</h4><p><code>Redis</code>4.0之后为<code>maxmemory_policy</code>淘汰策略添加了两个<code>LFU</code>模式：</p><ul><li><code>volatile-lfu</code>：对有过期时间的key采用<code>LFU</code>淘汰算法</li><li><code>allkeys-lfu</code>：对全部key采用<code>LFU</code>淘汰算法</li></ul><p>还有2个配置可以调整<code>LFU</code>算法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lfu-log-factor 10</span><br><span class="line">lfu-decay-time 1</span><br></pre></td></tr></table></figure><p><code>lfu-log-factor</code>可以调整计数器<code>counter</code>的增长速度，<code>lfu-log-factor</code>越大，<code>counter</code>增长的越慢。</p><p><code>lfu-decay-time</code>是一个以分钟为单位的数值，可以调整<code>counter</code>的减少速度</p><h2 id="内存淘汰策略的选择"><a href="#内存淘汰策略的选择" class="headerlink" title="内存淘汰策略的选择"></a>内存淘汰策略的选择</h2><p><strong>个人观点</strong></p><p>我们在选择使用淘汰策略的时候可以根据访问key的方式来选择不同的淘汰策略</p><p>1、当我们redis中的key基本上都有用到，也就是说每个key都有周期性访问到，那就可以选择使用random策略</p><p>2、当我们redis中的key部分是我们经常访问的，部分是非经常访问的就可以考虑使用LRU和LFU策略</p><p>3、当我们想根据时间长久淘汰超时数据时，就选用ttl</p><p>4、我们根据我们的需要是否有要长久保存的key来选择volatile或者是all，如果有需要长久保存的key，则使用volatile，否则可以使用all全表扫描</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;相关链接&quot;&gt;&lt;a href=&quot;#相关链接&quot; class=&quot;headerlink&quot; title=&quot;相关链接&quot;&gt;&lt;/a&gt;相关链接&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;redis LRU策略分析：&lt;a href=&quot;https://www.cnblogs.com/linxiyue/p/10945216.html&quot;&gt;https://www.cnblogs.com/linxiyue/p/10945216.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;redis LFU策略分析：&lt;a href=&quot;https://www.cnblogs.com/linxiyue/p/10955533.html&quot;&gt;https://www.cnblogs.com/linxiyue/p/10955533.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;redis LRU伪代码演示：&lt;a href=&quot;https://github.com/mailjobblog/dev_redis/blob/master/LRU/LRU_Cache.php&quot;&gt;https://github.com/mailjobblog/dev_redis/blob/master/LRU/LRU_Cache.php&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="redis" scheme="https://lybigdata.xyz/categories/redis/"/>
    
    
    <category term="redis" scheme="https://lybigdata.xyz/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis事务</title>
    <link href="https://lybigdata.xyz/posts/1298018908.html"/>
    <id>https://lybigdata.xyz/posts/1298018908.html</id>
    <published>2021-01-20T13:56:41.000Z</published>
    <updated>2024-11-02T13:24:15.114Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Redis-事务"><a href="#Redis-事务" class="headerlink" title="Redis 事务"></a>Redis 事务</h2><p>关系型数据中的事务都是原子性的，而redis 的事务是非原子性的。</p><span id="more"></span><h2 id="Redis事务相关命令："><a href="#Redis事务相关命令：" class="headerlink" title="Redis事务相关命令："></a>Redis事务相关命令：</h2><ul><li>MULTI ：开启事务，redis会将后续的命令逐个放入队列中，然后使用<strong>EXEC命令来原子化</strong>执行这个命令系列。</li><li>EXEC：执行事务中的所有操作命令。</li><li>DISCARD：取消事务，放弃执行事务块中的所有命令。</li><li>WATCH：监视一个或多个key,如果事务在执行前，这个key(或多个key)被其他命令修改，则事务被中断，不会执行事务中的任何命令。</li><li>UNWATCH：取消WATCH对所有key的监视。</li></ul><h2 id="DB事务和-redis事务对比"><a href="#DB事务和-redis事务对比" class="headerlink" title="DB事务和 redis事务对比"></a>DB事务和 redis事务对比</h2><table><thead><tr><th></th><th><strong>一致性</strong>（Consistency）</th><th><strong>隔离性</strong>（Isolation）</th><th><strong>持久性</strong>（Durability）</th><th><strong>原子性</strong>（Atomicity）</th></tr></thead><tbody><tr><td><strong>mysql</strong></td><td>支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td><strong>redis</strong></td><td>支持</td><td>支持</td><td>不支持</td><td>不支持</td></tr></tbody></table><h2 id="事务演示"><a href="#事务演示" class="headerlink" title="事务演示"></a>事务演示</h2><p>执行执行一组事务命令</p><p><img src="https://img-blog.csdnimg.cn/20210113121028123.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpYmluZW1haWw=,size_16,color_FFFFFF,t_70" alt="img"></p><p>其中一条命令执行错误，后续的命令还是会继续执行。比如对string类型进行<code>incr</code>操作，并没有语法错误，但是会产生一个异常</p><h3 id="基于WATCH对于事务作中断测试"><a href="#基于WATCH对于事务作中断测试" class="headerlink" title="基于WATCH对于事务作中断测试"></a>基于WATCH对于事务作中断测试</h3><h4 id="客户端-lt-1-gt"><a href="#客户端-lt-1-gt" class="headerlink" title="客户端&lt;1&gt;"></a>客户端&lt;1&gt;</h4><p><img src="https://img-blog.csdnimg.cn/20210113124033744.png" alt="img"></p><h4 id="客户端-lt-2-gt"><a href="#客户端-lt-2-gt" class="headerlink" title="客户端&lt;2&gt;"></a>客户端&lt;2&gt;</h4><p><img src="https://img-blog.csdnimg.cn/2021011312405210.png" alt="img"></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>1、当监控的key被其中一个事务修改后，那么另一个事务的执行将会被打断</p><p>2、n个事务事务开启，谁先exec谁成功，后面的exec会被打断</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Redis-事务&quot;&gt;&lt;a href=&quot;#Redis-事务&quot; class=&quot;headerlink&quot; title=&quot;Redis 事务&quot;&gt;&lt;/a&gt;Redis 事务&lt;/h2&gt;&lt;p&gt;关系型数据中的事务都是原子性的，而redis 的事务是非原子性的。&lt;/p&gt;</summary>
    
    
    
    <category term="redis" scheme="https://lybigdata.xyz/categories/redis/"/>
    
    
    <category term="redis" scheme="https://lybigdata.xyz/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis 日志showlog 和 管道pileline</title>
    <link href="https://lybigdata.xyz/posts/283315164.html"/>
    <id>https://lybigdata.xyz/posts/283315164.html</id>
    <published>2021-01-20T13:55:55.000Z</published>
    <updated>2024-11-02T13:24:15.114Z</updated>
    
    <content type="html"><![CDATA[<h1 id="redis日志"><a href="#redis日志" class="headerlink" title="redis日志"></a>redis日志</h1><p>slowlog-log-slower-than：指定执行时间超过多少微秒(1秒等于1000000微秒) 的命令请求会被记录到日志上</p><p>slowlog-max-len：指定服务器最多保存多少条慢查询操作</p><span id="more"></span><p>设置slowlog有两种方式：</p><ul><li>方式一：通过配置redis.conf文件进行配置</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 执行时间大于多少微秒(microsecond，1秒 = 1,000,000 微秒)的查询进行记录。</span><br><span class="line">slowlog-log-lower-than 1000</span><br><span class="line"> </span><br><span class="line">#最多能保存多少条日志</span><br><span class="line">slowlog-max-len 200</span><br></pre></td></tr></table></figure><ul><li>方式二：通过CONFIG命令进行配置</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 配置查询时间超过1毫秒的， 第一个参数单位是微秒</span><br><span class="line">&gt; CONFIG  SET  slowlog-log-slower-than 1000</span><br><span class="line">#  保存 100 条慢查记录</span><br><span class="line">&gt; config set slowlog-max-len 100</span><br></pre></td></tr></table></figure><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379 &gt; slowlog get</span><br></pre></td></tr></table></figure><p>以windows为例查看记录如下</p><p><img src="https://img-blog.csdnimg.cn/img_convert/c4e5184361b82081b57a9bb33fb7543f.png" alt="img"></p><p>为了方便解说，我设置超时时间为0毫秒，日志记录为1条</p><p>那么记录的中的1）2）3）4）分别表示什么呢？</p><p>1）表示日志唯一标识符uid</p><p>2）命令执行时系统的时间戳</p><p>3）命令执行的时长，以微妙来计算</p><p>4）命令和命令的参数</p><p>做日志查询的时候，可以通过3）来查看是具体的命令运行时间（注意：再强调一次，时间的单位是微妙，但对于一个插入操作来说，10000微妙，也就是10毫秒即0.01秒已经可以算是慢操作了）</p><p>需要去查看redis生成的持久型日志，这需要额外去配置一些内容，其中涉及到了集群和分布式，</p></blockquote><h1 id="redis-管道-pileline"><a href="#redis-管道-pileline" class="headerlink" title="redis 管道 pileline"></a>redis 管道 pileline</h1><h3 id="1、未使用pipeline执行N条命令"><a href="#1、未使用pipeline执行N条命令" class="headerlink" title="1、未使用pipeline执行N条命令"></a>1、未使用pipeline执行N条命令</h3><p><img src="https://img-blog.csdnimg.cn/20210111123719829.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpYmluZW1haWw=,size_16,color_FFFFFF,t_70" alt="img"></p><h3 id="2、使用了pipeline执行N条命令"><a href="#2、使用了pipeline执行N条命令" class="headerlink" title="2、使用了pipeline执行N条命令"></a>2、使用了pipeline执行N条命令</h3><p><img src="https://img-blog.csdnimg.cn/20210111123735979.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpYmluZW1haWw=,size_16,color_FFFFFF,t_70" alt="img"></p><h3 id="3、两者性能对比"><a href="#3、两者性能对比" class="headerlink" title="3、两者性能对比"></a>3、两者性能对比</h3><p><img src="https://img-blog.csdnimg.cn/20181122105544269.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3cxbGd5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="三、原生批命令-mset-mget-与Pipeline对比"><a href="#三、原生批命令-mset-mget-与Pipeline对比" class="headerlink" title="三、原生批命令(mset, mget)与Pipeline对比"></a>三、原生批命令(mset, mget)与Pipeline对比</h2><p><strong>1、原生批命令是原子性，pipeline是非原子性</strong></p><p>(原子性概念:一个事务是一个不可分割的最小工作单位,要么都成功要么都失败。原子操作是指你的一个业务逻辑必须是不可拆分的. 处理一件事情要么都成功，要么都失败，原子不可拆分)</p><p>2、原生批命令一命令多个key, 但pipeline支持多命令（存在事务），非原子性</p><p>3、原生批命令是服务端实现，而pipeline需要服务端与客户端共同完成</p><p>4、<strong>使用pipeline组装的命令个数不能太多，不然数据量过大，增加客户端的等待时间，还可能造成网络阻塞，可以将大量命令的拆分多个小的pipeline命令完成</strong></p><p>5、redis提供了mset、mget方法，但没有提供mdel方法，如果想实现，可以借助pipeline实现。</p><h3 id="贴上代码"><a href="#贴上代码" class="headerlink" title="贴上代码"></a>贴上代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$stime=microtime(true); //获取程序开始执行的时间</span><br><span class="line">echo &#x27;开始内存：&#x27;.memory_get_usage(), &#x27;&#x27;; echo PHP_EOL;</span><br><span class="line">$redis = new \Redis();</span><br><span class="line"> </span><br><span class="line">$redis-&gt;connect(&#x27;192.168.29.108&#x27;,6379);</span><br><span class="line">$redis-&gt;auth(&quot;root&quot;);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">//$pipe=$redis-&gt;multi($redis::PIPELINE);//将多个操作当成一个事务执行</span><br><span class="line">$pipe=$redis-&gt;pipeline();//（多条）执行命令简单的，更加快速的发送给服务器，但是没有任何原子性的保证</span><br><span class="line"> </span><br><span class="line">for($i= 0; $i&lt;10000 ; $i++) &#123;</span><br><span class="line"> </span><br><span class="line">    $pipe-&gt;set(&quot;key::$i&quot;,str_pad($i,4,&#x27;0&#x27;,0));</span><br><span class="line"> </span><br><span class="line">    $pipe-&gt;get(&quot;key::$i&quot;);</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">$replies=$pipe-&gt;exec();</span><br><span class="line"> </span><br><span class="line">$etime=microtime(true);//获取程序执行结束的时间</span><br><span class="line"> </span><br><span class="line">$total=($etime-$stime);   //计算差值</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">echo &quot;[页面执行时间：&#123;$total&#125; ]s&quot;; echo PHP_EOL;</span><br><span class="line">echo &#x27;运行后内存：&#x27;.memory_get_usage(), &#x27;&#x27;; echo PHP_EOL;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;redis日志&quot;&gt;&lt;a href=&quot;#redis日志&quot; class=&quot;headerlink&quot; title=&quot;redis日志&quot;&gt;&lt;/a&gt;redis日志&lt;/h1&gt;&lt;p&gt;slowlog-log-slower-than：指定执行时间超过多少微秒(1秒等于1000000微秒) 的命令请求会被记录到日志上&lt;/p&gt;
&lt;p&gt;slowlog-max-len：指定服务器最多保存多少条慢查询操作&lt;/p&gt;</summary>
    
    
    
    <category term="redis" scheme="https://lybigdata.xyz/categories/redis/"/>
    
    
    <category term="redis" scheme="https://lybigdata.xyz/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis击穿-穿透-雪崩</title>
    <link href="https://lybigdata.xyz/posts/403285957.html"/>
    <id>https://lybigdata.xyz/posts/403285957.html</id>
    <published>2021-01-20T13:53:29.000Z</published>
    <updated>2024-11-02T13:24:15.114Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><blockquote><p>[击穿，穿透，雪崩] 思维导图：<a href="https://kdocs.cn/l/sv1T3ny7wRQl">https://kdocs.cn/l/sv1T3ny7wRQl</a><br>布隆过滤器：<a href="https://blog.mailjob.net/posts/7164113.html">https://blog.mailjob.net/posts/7164113.html</a>  </p></blockquote><span id="more"></span><h2 id="Redis-缓存击穿"><a href="#Redis-缓存击穿" class="headerlink" title="Redis 缓存击穿"></a>Redis 缓存击穿</h2><h4 id="1、形成原因："><a href="#1、形成原因：" class="headerlink" title="1、形成原因："></a>1、形成原因：</h4><p>当缓存服务器重启或者大量缓存集中在某一个时间段失效，这样在失效的时候，也会给后端系统(比如DB)带来很大压力。</p><h4 id="2、解决方案"><a href="#2、解决方案" class="headerlink" title="2、解决方案"></a>2、解决方案</h4><p>1、增加互斥锁：基于 redis 或者 zookeeper 实现互斥锁，等待第一个请求构建完缓存之后，再释放锁，进而其它请求才能通过该 key 访问数据<br>2、设置用不过期：击穿采用互斥锁。可能会发生死锁、线程池阻塞等问题，建议：高热点key，写定时器更新key的过期时间，最好是在并发量最小的时候。</p><h4 id="3、缓存击穿示例图"><a href="#3、缓存击穿示例图" class="headerlink" title="3、缓存击穿示例图"></a>3、缓存击穿示例图</h4><p><img src="http://img.github.mailjob.net/jefferyjob.github.io/20210204224832.png" alt="img"></p><h2 id="Redis-缓存穿透"><a href="#Redis-缓存穿透" class="headerlink" title="Redis 缓存穿透"></a>Redis 缓存穿透</h2><h4 id="1、形成原因：-1"><a href="#1、形成原因：-1" class="headerlink" title="1、形成原因："></a>1、形成原因：</h4><p>key对应的数据在数据源并不存在，每次针对此key的请求从缓存获取不到，请求都会到数据源，从而可能压垮数据源。比如用一个不存在的用户id获取用户信息，不论缓存还是数据库都没有，若黑客利用此漏洞进行攻击可能压垮数据库。</p><h4 id="2、解决方案-1"><a href="#2、解决方案-1" class="headerlink" title="2、解决方案"></a>2、解决方案</h4><p>1、<strong>采用布隆过滤器</strong>，将所有可能存在的数据哈希到一个足够大的<code>bit map</code>中，一个一定不存在的数据会被 这个<code>bit 数组</code>拦截掉，从而避免了对底层存储系统的查询压力<br>2、如果一个查询返回的数据为空（不管是数据不存在，还是系统故障），我们仍然把这个空结果进行缓存，但它的过期时间会很短，最长不超过五分钟。</p><h4 id="3、缓存击穿示例图-1"><a href="#3、缓存击穿示例图-1" class="headerlink" title="3、缓存击穿示例图"></a>3、缓存击穿示例图</h4><p><img src="http://img.github.mailjob.net/jefferyjob.github.io/20210204224826.png" alt="img"></p><h2 id="Redis-缓存雪崩"><a href="#Redis-缓存雪崩" class="headerlink" title="Redis 缓存雪崩"></a>Redis 缓存雪崩</h2><h4 id="1、形成原因：-2"><a href="#1、形成原因：-2" class="headerlink" title="1、形成原因："></a>1、形成原因：</h4><p>当缓存服务器重启或者大量key集中在某一个时间段失效，这样在失效的时候，也会给后端系统(比如DB)带来很大压力</p><h4 id="2、解决方案-2"><a href="#2、解决方案-2" class="headerlink" title="2、解决方案"></a>2、解决方案</h4><p>1、保证高可用：做redis集群，哨兵。如果有的redis服务器出现宕机，切换到其他的节点<br>2、后端限流削峰：利用redis lua做漏斗算法，其他的进程进行排队。降级服务，牺牲一些服务器，淘宝双十一的时候，就不允许查看一年前的订单也不允许退款<br><strong>3、过期时间错开，生成缓存的时候，一定时间内的过期时间随机生成。尽量避免大量缓存同一时间内失效</strong></p><h4 id="3、缓存击穿示例图-2"><a href="#3、缓存击穿示例图-2" class="headerlink" title="3、缓存击穿示例图"></a>3、缓存击穿示例图</h4><p><img src="http://img.github.mailjob.net/jefferyjob.github.io/20210204224822.png" alt="img"></p>]]></content>
    
    
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;/&gt;

&lt;h2 id=&quot;参考文献&quot;&gt;&lt;a href=&quot;#参考文献&quot; class=&quot;headerlink&quot; title=&quot;参考文献&quot;&gt;&lt;/a&gt;参考文献&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;[击穿，穿透，雪崩] 思维导图：&lt;a href=&quot;https://kdocs.cn/l/sv1T3ny7wRQl&quot;&gt;https://kdocs.cn/l/sv1T3ny7wRQl&lt;/a&gt;&lt;br&gt;布隆过滤器：&lt;a href=&quot;https://blog.mailjob.net/posts/7164113.html&quot;&gt;https://blog.mailjob.net/posts/7164113.html&lt;/a&gt;  &lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="redis" scheme="https://lybigdata.xyz/categories/redis/"/>
    
    
    <category term="redis" scheme="https://lybigdata.xyz/tags/redis/"/>
    
  </entry>
  
</feed>
